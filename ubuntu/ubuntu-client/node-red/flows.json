[
    {
        "id": "0277478f1e68b0ce",
        "type": "tab",
        "label": "1 RPI",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4e821b48bbd42ca3",
        "type": "tab",
        "label": "Main Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4db1d4819dfea4ef",
        "type": "tab",
        "label": "Reservation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "df1a303ec9e1b819",
        "type": "tab",
        "label": "1Reservation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d959e01e9af70966",
        "type": "tab",
        "label": "Support",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0ab432dc59b6d0a3",
        "type": "tab",
        "label": "Logs",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "19da2f4cf4bf4170",
        "type": "tab",
        "label": "Users",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a71c83548b86d5cf",
        "type": "tab",
        "label": "CreateUser",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "01557fa3c5d57cbe",
        "type": "tab",
        "label": "EditUser",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1317a1110c9c2dbe",
        "type": "tab",
        "label": "Frontend",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "50484f8edde3dcf6",
        "type": "group",
        "z": "4e821b48bbd42ca3",
        "name": "Group",
        "style": {
            "label": false
        },
        "nodes": [
            "55b5a88e854315aa",
            "a91a3199ac6a18da",
            "209054f98f416386",
            "68e0cfa4b06db715",
            "a580835a1833e887",
            "e76a965d86634085",
            "5ff74dcd7064a6fa",
            "fde7679c576a0709",
            "287aae9a9238b558",
            "c10f6f1561b6cd40",
            "38d122b3c3b12009",
            "b938c7cb121c53e7",
            "6fab27b9c05f9df7",
            "e81a75bf50a618c9",
            "07a0fd7fb6a301ec",
            "4e8fbb7da98c1491",
            "5e3ff8dfc9d6ba90"
        ],
        "x": 54,
        "y": 139,
        "w": 1272,
        "h": 342
    },
    {
        "id": "829459fd4bc2bd59",
        "type": "group",
        "z": "4e821b48bbd42ca3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5588a030b4ba3054",
            "4a0e9bc2ee73a43b",
            "99e8dec59f4301b0",
            "1a334ccfcf23875f",
            "3244fdb1a10c6c55"
        ],
        "x": 54,
        "y": 539,
        "w": 732,
        "h": 142
    },
    {
        "id": "ccb069e81cf069c2",
        "type": "group",
        "z": "0277478f1e68b0ce",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7ce08affddeab4ea",
            "8d83378d17572eea",
            "3d8a4d7a697b706b",
            "75680836e4f80837",
            "c5c99200d4be6aee",
            "ddec77a73510afac",
            "a092be41ed4f7e6b",
            "ee6c97f4e7d07d57",
            "8ee28446dd85d838",
            "7a4cbfceb7aa3e95",
            "b04bf2629fdccf3b",
            "2740cf20720b1a61",
            "0bebc33ba9eb758a",
            "15c91546bc53c7d2",
            "7e4d06239d75c45e",
            "6120ee65d788a2ac",
            "c193eb9a4497f2b7",
            "57843337e96261b9",
            "13bba33c4c23465e",
            "c4e68b2f0ddf484b",
            "bd4e3660d71f5103",
            "168eaec1b7a98d4a",
            "f62dc34083744dc0",
            "d420f6fcbf97a6a1",
            "5ff5d5d141451727",
            "823bbfc739fc0d8f",
            "5e9433c8a2cb5521"
        ],
        "x": 14,
        "y": 19,
        "w": 1492,
        "h": 742
    },
    {
        "id": "cd6f4e02c3e3acd0",
        "type": "group",
        "z": "0277478f1e68b0ce",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3fa65fc688213d56",
            "e6c2b49c82e472ec",
            "e5e3745fc8aaf3ec",
            "d056b9c31bc3dabe",
            "f93ac2a6971844a0",
            "2272194001cc5497",
            "600770e1c9962a12",
            "b163c44657714096"
        ],
        "x": 14,
        "y": 3099,
        "w": 1052,
        "h": 242
    },
    {
        "id": "1501d7bab16f0152",
        "type": "group",
        "z": "0277478f1e68b0ce",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5ea7201186c39d78",
            "dc64d5a8f07b8a51",
            "df2886bcb2806c4a",
            "e2c10c63f4e84396",
            "c2d22e93f525737f",
            "9067218c53ba6cbe",
            "f506b700ac5e373b",
            "bfdbe67471782da6"
        ],
        "x": 14,
        "y": 2499,
        "w": 1052,
        "h": 202
    },
    {
        "id": "02634166f1864967",
        "type": "group",
        "z": "0277478f1e68b0ce",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b25b11cde203614a",
            "152d59af688bfd2e",
            "8f031aee5b67aa8d"
        ],
        "x": 14,
        "y": 2379,
        "w": 752,
        "h": 82
    },
    {
        "id": "1d61923917992343",
        "type": "group",
        "z": "0277478f1e68b0ce",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c9b96fcb3f9a4c9f",
            "a147a8a9cc0a78fb",
            "c502d1aa06ef84c8"
        ],
        "x": 14,
        "y": 779,
        "w": 732,
        "h": 82
    },
    {
        "id": "ee2a6888dd01074b",
        "type": "group",
        "z": "0277478f1e68b0ce",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "65a7457d474c2588",
            "df7d43d2f481b1b0",
            "dc982ded04959f43",
            "2028de94f5a9e6f4",
            "1e2dc49481d7a43c",
            "327033fcf5e4a864"
        ],
        "x": 14,
        "y": 2939,
        "w": 1472,
        "h": 82
    },
    {
        "id": "e47015bbcd561a71",
        "type": "group",
        "z": "0277478f1e68b0ce",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4431d4db3aa78aee",
            "50c67b457275e78e",
            "a4648b7c3b62ec2a",
            "ad051c630f71aca6",
            "fdb9322806b9d976"
        ],
        "x": 14,
        "y": 2759,
        "w": 972,
        "h": 142
    },
    {
        "id": "20dfacadc7600b19",
        "type": "group",
        "z": "0277478f1e68b0ce",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b66ed4d6167846b0",
            "7210d850469831b7",
            "4b8937aa9badfa68",
            "da9aa2f4a85227c4",
            "11b9a3c190463011",
            "14a69f243c9384b2",
            "dc21bb075e71a6ab",
            "34f824be3a8439fc",
            "738570c47c3f2c0f"
        ],
        "x": 14,
        "y": 899,
        "w": 1092,
        "h": 202
    },
    {
        "id": "0d0f4ba3b295a5e0",
        "type": "group",
        "z": "0277478f1e68b0ce",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "93578839b4841675",
            "e1a692039636ccb6",
            "a419e9e367d6a717",
            "f49b0d09a33e7b5b",
            "fd3a94d5c2f5f41d",
            "8383793c1105f10c",
            "7f102e07e5ef5c01",
            "5c0e85234562f4e2",
            "cc25423c5d8e26d6",
            "2e61021ce704dfe4",
            "547243056bf26e0a",
            "ee93e7ac092f78b3",
            "52305503b0150169",
            "86413ad55842e730",
            "eead5ce7da467f2e",
            "418329f2df6a1ff5",
            "83519b076962155a",
            "044d98a2b8dc7c7a"
        ],
        "x": 14,
        "y": 1139,
        "w": 1832,
        "h": 342
    },
    {
        "id": "2b444b808f2003ca",
        "type": "group",
        "z": "0277478f1e68b0ce",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1aeaa4607ee6b29a",
            "5dc1787fd36ea227",
            "482f68d72f3e71f6",
            "5b3126d8779138f9",
            "c6f719b6be57c666",
            "9b88fd4b128fc57c",
            "421ae207c005b560"
        ],
        "x": 14,
        "y": 1759,
        "w": 992,
        "h": 202
    },
    {
        "id": "c8e0075148b8c946",
        "type": "group",
        "z": "0277478f1e68b0ce",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c24b96c496942605",
            "38e95f2c24175c35",
            "52498b44064f823a",
            "ea9465a1fc8c9e18",
            "cf28368a6c246fc7",
            "008d0f8c6ef1132f",
            "3a6fa2bcfc33ca85",
            "e9c399127f96be64",
            "7e980f13e9bced0d",
            "5d363f243f30be67",
            "cdf5a67d5c2ad4cf"
        ],
        "x": 14,
        "y": 1519,
        "w": 2052,
        "h": 202
    },
    {
        "id": "b2b7d65f2a1b01c8",
        "type": "group",
        "z": "0277478f1e68b0ce",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "23c95a9f0540bec5",
            "3570325e8b5ae823",
            "9bed59b34c201e13",
            "69e27d850cf87988",
            "2295aae27696080b",
            "12d36d88e9171d2f"
        ],
        "x": 14,
        "y": 2119,
        "w": 1012,
        "h": 222
    },
    {
        "id": "9e1f662934605284",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "SmartOffice",
            "hideToolbar": "false",
            "allowSwipe": "mouse",
            "lockMenu": "true",
            "allowTempTheme": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "1db4abaa008c9aa6",
        "type": "ui_group",
        "name": "Local associé",
        "tab": "b58955a989bd717a",
        "order": 2,
        "disp": false,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "08886a7cd4dd855e",
        "type": "mongodb4-client",
        "name": "MongoDB",
        "protocol": "mongodb",
        "hostname": "localhost",
        "port": "27017",
        "dbName": "reservationDB",
        "appName": "",
        "authSource": "admin",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "",
        "advanced": "{}",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "b58955a989bd717a",
        "type": "ui_tab",
        "name": "RPI",
        "icon": "",
        "order": 6,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "40a836b15e21b5f0",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1760465bb1ca33bd",
        "type": "ui_group",
        "name": "Main",
        "tab": "40a836b15e21b5f0",
        "order": 1,
        "disp": false,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "dc7fd2a2a5b25c12",
        "type": "ui_tab",
        "name": "Réservation",
        "icon": "",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7d4fc252c55d200f",
        "type": "ui_tab",
        "name": "Support",
        "icon": "",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0e66de217ecb6d6e",
        "type": "ui_tab",
        "name": "Logs",
        "icon": "",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f4731d1939b558e5",
        "type": "ui_tab",
        "name": "Utilisateurs",
        "icon": "",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "821b48d3e4d5beb6",
        "type": "ui_group",
        "name": "Main",
        "tab": "dc7fd2a2a5b25c12",
        "order": 1,
        "disp": false,
        "width": 22,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b255ced8c894f4f0",
        "type": "ui_group",
        "name": "Main",
        "tab": "7d4fc252c55d200f",
        "order": 1,
        "disp": false,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f87d496c91fac1c3",
        "type": "ui_group",
        "name": "Main",
        "tab": "0e66de217ecb6d6e",
        "order": 1,
        "disp": false,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b433e86cb98af344",
        "type": "ui_group",
        "name": "Main",
        "tab": "f4731d1939b558e5",
        "order": 1,
        "disp": false,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "841582caaa17523e",
        "type": "ui_group",
        "name": "Appareils",
        "tab": "40a836b15e21b5f0",
        "order": 2,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8753015cdcb44cc3",
        "type": "ui_group",
        "name": "Carte",
        "tab": "40a836b15e21b5f0",
        "order": 3,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7fda8290ea03273e",
        "type": "ui_group",
        "name": "Qualité de l'air",
        "tab": "40a836b15e21b5f0",
        "order": 4,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7c4ba8e1e71b582f",
        "type": "ui_group",
        "name": "Bruit",
        "tab": "b58955a989bd717a",
        "order": 3,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "eba1eeab2c58edb8",
        "type": "ui_group",
        "name": "Température",
        "tab": "b58955a989bd717a",
        "order": 4,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "77cc3ec7a2ad9d4e",
        "type": "ui_group",
        "name": "Humidité",
        "tab": "b58955a989bd717a",
        "order": 5,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f755c7094e0204d7",
        "type": "ui_group",
        "name": "Luminosité",
        "tab": "b58955a989bd717a",
        "order": 6,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6d9ac2ca21f48ee4",
        "type": "ui_group",
        "name": "Caméra",
        "tab": "b58955a989bd717a",
        "order": 7,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "78055e7e1fa8ec1f",
        "type": "ui_group",
        "name": "Alerte",
        "tab": "b58955a989bd717a",
        "order": 9,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "eb521a47e9a8db09",
        "type": "ui_group",
        "name": "Derniers scans de cartes",
        "tab": "b58955a989bd717a",
        "order": 8,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "de51837b8b377b3b",
        "type": "ui_group",
        "name": "Réservation",
        "tab": "b58955a989bd717a",
        "order": 10,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f36af4e5677b5672",
        "type": "ui_group",
        "name": "GPS",
        "tab": "b58955a989bd717a",
        "order": 11,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f988ca3073539a8c",
        "type": "ui_group",
        "name": "Header",
        "tab": "b58955a989bd717a",
        "order": 1,
        "disp": false,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "2dd860a0786620d5",
        "type": "ui_tab",
        "name": "1Reservation",
        "icon": "",
        "order": 7,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "ca6e864468baaad4",
        "type": "ui_group",
        "name": "Form",
        "tab": "2dd860a0786620d5",
        "order": 1,
        "disp": false,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c7b473b3c51d1231",
        "type": "ui_tab",
        "name": "CreateUser",
        "icon": "",
        "order": 8,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "600bf87db0283dac",
        "type": "ui_group",
        "name": "Main",
        "tab": "c7b473b3c51d1231",
        "order": 1,
        "disp": false,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "bf68deda59755705",
        "type": "ui_tab",
        "name": "EditUser",
        "icon": "",
        "order": 9,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "1e09fa150998fee1",
        "type": "ui_group",
        "name": "Main",
        "tab": "bf68deda59755705",
        "order": 1,
        "disp": false,
        "width": 34,
        "collapse": false,
        "className": ""
    },
    {
        "id": "21e05f13d924f582",
        "type": "ui_spacer",
        "z": "01557fa3c5d57cbe",
        "name": "spacer",
        "group": "1e09fa150998fee1",
        "order": 2,
        "width": 5,
        "height": 1
    },
    {
        "id": "f5ead6b6eb26ef4a",
        "type": "ui_spacer",
        "z": "01557fa3c5d57cbe",
        "name": "spacer",
        "group": "1e09fa150998fee1",
        "order": 4,
        "width": 3,
        "height": 1
    },
    {
        "id": "2e6d4ba76a39cb0c",
        "type": "ui_spacer",
        "z": "01557fa3c5d57cbe",
        "name": "spacer",
        "group": "1e09fa150998fee1",
        "order": 5,
        "width": 34,
        "height": 1
    },
    {
        "id": "9c09494ed61fa6c9",
        "type": "mqtt-broker",
        "name": "public-broker",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "eaa024f859c5f78e",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "mqtt.crt",
        "keyname": "mqtt.key",
        "caname": "mosquitto.org.crt",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "54759efd76491718",
        "type": "mqtt-broker",
        "name": "private-broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "64c8814b618a706e",
        "type": "mqtt-broker",
        "name": "public-secure-broker",
        "broker": "test.mosquitto.org",
        "port": "8884",
        "tls": "eaa024f859c5f78e",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "396b51b1e80299db",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "821b48d3e4d5beb6",
        "order": 3,
        "width": 22,
        "height": 1
    },
    {
        "id": "12c5473d402a3328",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "b255ced8c894f4f0",
        "order": 2,
        "width": 20,
        "height": 1
    },
    {
        "id": "9f480af02624f4a4",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "b255ced8c894f4f0",
        "order": 3,
        "width": 20,
        "height": 1
    },
    {
        "id": "45a014a07809fa44",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "b255ced8c894f4f0",
        "order": 4,
        "width": 8,
        "height": 1
    },
    {
        "id": "9ecc70b14f3ae3e4",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "b255ced8c894f4f0",
        "order": 6,
        "width": 8,
        "height": 1
    },
    {
        "id": "be86ac293dd68b3b",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "b255ced8c894f4f0",
        "order": 7,
        "width": 20,
        "height": 1
    },
    {
        "id": "1abfa5c4c5aba46f",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "b255ced8c894f4f0",
        "order": 8,
        "width": 20,
        "height": 1
    },
    {
        "id": "01438ef15e432dad",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "f87d496c91fac1c3",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "de9de6233b92bfed",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "f87d496c91fac1c3",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "aa439e16c4339b0a",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "f87d496c91fac1c3",
        "order": 6,
        "width": 20,
        "height": 1
    },
    {
        "id": "0fe629a8ee25b296",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "f87d496c91fac1c3",
        "order": 8,
        "width": 20,
        "height": 1
    },
    {
        "id": "364dbd91f5b7b5f0",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "b433e86cb98af344",
        "order": 2,
        "width": 3,
        "height": 1
    },
    {
        "id": "2976bf37854e3182",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "b433e86cb98af344",
        "order": 4,
        "width": 20,
        "height": 1
    },
    {
        "id": "1ede613224c90159",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "841582caaa17523e",
        "order": 4,
        "width": 12,
        "height": 1
    },
    {
        "id": "fb517bdc61591b61",
        "type": "ui_spacer",
        "z": "4e821b48bbd42ca3",
        "name": "spacer",
        "group": "841582caaa17523e",
        "order": 5,
        "width": 12,
        "height": 1
    },
    {
        "id": "7ce08affddeab4ea",
        "type": "ui_gauge",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "displayTemperatureGauge",
        "group": "eba1eeab2c58edb8",
        "order": 1,
        "width": 12,
        "height": 2,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°",
        "format": "{{value}}",
        "min": 0,
        "max": "40",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 820,
        "y": 140,
        "wires": []
    },
    {
        "id": "5ea7201186c39d78",
        "type": "ui_gauge",
        "z": "0277478f1e68b0ce",
        "g": "1501d7bab16f0152",
        "name": "displatLightGauge ",
        "group": "f755c7094e0204d7",
        "order": 1,
        "width": 12,
        "height": 2,
        "gtype": "gage",
        "title": "Luminosité (ADC)",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "800",
        "colors": [
            "#99c1f1",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 410,
        "y": 2540,
        "wires": []
    },
    {
        "id": "3fa65fc688213d56",
        "type": "ui_gauge",
        "z": "0277478f1e68b0ce",
        "g": "cd6f4e02c3e3acd0",
        "name": "displaySoundGauge",
        "group": "7c4ba8e1e71b582f",
        "order": 1,
        "width": 12,
        "height": 2,
        "gtype": "gage",
        "title": "Sound level (ADC)",
        "label": "°",
        "format": "{{value}}",
        "min": "0",
        "max": "700",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 440,
        "y": 3140,
        "wires": []
    },
    {
        "id": "b25b11cde203614a",
        "type": "ui_form",
        "z": "0277478f1e68b0ce",
        "g": "02634166f1864967",
        "name": "associated_local",
        "label": "Local associé",
        "group": "1db4abaa008c9aa6",
        "order": 1,
        "width": 12,
        "height": 1,
        "options": [
            {
                "label": "",
                "value": "local1",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "local1": ""
        },
        "payload": "",
        "submit": "Enregistrer",
        "cancel": "Supprimer",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 130,
        "y": 2420,
        "wires": [
            [
                "152d59af688bfd2e"
            ]
        ]
    },
    {
        "id": "8d83378d17572eea",
        "type": "ui_gauge",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "displayHumidityGauge",
        "group": "77cc3ec7a2ad9d4e",
        "order": 1,
        "width": 12,
        "height": 2,
        "gtype": "gage",
        "title": "Humidité",
        "label": "°",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 780,
        "y": 300,
        "wires": []
    },
    {
        "id": "ee93e7ac092f78b3",
        "type": "ui_text",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "group": "f988ca3073539a8c",
        "order": 1,
        "width": 24,
        "height": 1,
        "name": "displayRpiTitle",
        "label": "Vue d'ensemble > ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "32",
        "color": "#ffffff",
        "x": 1340,
        "y": 1440,
        "wires": []
    },
    {
        "id": "c9b96fcb3f9a4c9f",
        "type": "ui_button",
        "z": "0277478f1e68b0ce",
        "g": "1d61923917992343",
        "name": "cameraButton",
        "group": "6d9ac2ca21f48ee4",
        "order": 1,
        "width": 12,
        "height": 1,
        "passthru": false,
        "label": "Accéder à la caméra",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 820,
        "wires": [
            [
                "a147a8a9cc0a78fb"
            ]
        ]
    },
    {
        "id": "3d8a4d7a697b706b",
        "type": "ui_button",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "desactivateAlertButton",
        "group": "78055e7e1fa8ec1f",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": false,
        "label": "Désactiver l'alarme",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 180,
        "y": 600,
        "wires": [
            [
                "7a4cbfceb7aa3e95"
            ]
        ]
    },
    {
        "id": "75680836e4f80837",
        "type": "ui_text",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "group": "78055e7e1fa8ec1f",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "displayAlertText",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1400,
        "y": 120,
        "wires": []
    },
    {
        "id": "008d0f8c6ef1132f",
        "type": "ui_text",
        "z": "0277478f1e68b0ce",
        "g": "c8e0075148b8c946",
        "group": "de51837b8b377b3b",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "displayReservationOrNot",
        "label": "status",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1190,
        "y": 1620,
        "wires": []
    },
    {
        "id": "93578839b4841675",
        "type": "mqtt in",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "name": "hello",
        "topic": "smartoffice/1/+/hello",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "54759efd76491718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 1300,
        "wires": [
            [
                "e1a692039636ccb6",
                "52305503b0150169",
                "c24b96c496942605"
            ]
        ]
    },
    {
        "id": "c5c99200d4be6aee",
        "type": "mqtt in",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "getTemperatureAndHumidityPublic",
        "topic": "smartoffice/1/+/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9c09494ed61fa6c9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 200,
        "wires": [
            [
                "ddec77a73510afac",
                "a092be41ed4f7e6b",
                "0bebc33ba9eb758a"
            ]
        ]
    },
    {
        "id": "dc64d5a8f07b8a51",
        "type": "mqtt in",
        "z": "0277478f1e68b0ce",
        "g": "1501d7bab16f0152",
        "name": "getLightSensorPrivate",
        "topic": "smartoffice/1/+/light_sensor",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "54759efd76491718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 2540,
        "wires": [
            [
                "5ea7201186c39d78",
                "df2886bcb2806c4a",
                "9067218c53ba6cbe"
            ]
        ]
    },
    {
        "id": "e6c2b49c82e472ec",
        "type": "mqtt in",
        "z": "0277478f1e68b0ce",
        "g": "cd6f4e02c3e3acd0",
        "name": "getSoundSensorPrivate",
        "topic": "smartoffice/1/+/sound_sensor",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "54759efd76491718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 3140,
        "wires": [
            [
                "3fa65fc688213d56",
                "e5e3745fc8aaf3ec",
                "600770e1c9962a12"
            ]
        ]
    },
    {
        "id": "482f68d72f3e71f6",
        "type": "mqtt in",
        "z": "0277478f1e68b0ce",
        "g": "2b444b808f2003ca",
        "name": "get_location",
        "topic": "smartoffice/1/+/gps",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "54759efd76491718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 1800,
        "wires": [
            [
                "5b3126d8779138f9",
                "c6f719b6be57c666"
            ]
        ]
    },
    {
        "id": "50c67b457275e78e",
        "type": "mqtt in",
        "z": "0277478f1e68b0ce",
        "g": "e47015bbcd561a71",
        "name": "getRfidPrivate",
        "topic": "smartoffice/1/+/rfid",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "54759efd76491718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 2860,
        "wires": [
            [
                "a4648b7c3b62ec2a"
            ]
        ]
    },
    {
        "id": "a147a8a9cc0a78fb",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "1d61923917992343",
        "name": "containsCameraLink",
        "func": "msg.payload = global.get('cameraLink');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 820,
        "wires": [
            [
                "c502d1aa06ef84c8"
            ]
        ]
    },
    {
        "id": "c502d1aa06ef84c8",
        "type": "ui_template",
        "z": "0277478f1e68b0ce",
        "g": "1d61923917992343",
        "group": "6d9ac2ca21f48ee4",
        "name": "redirectToCameraPage",
        "order": 3,
        "width": 1,
        "height": 1,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg && msg.payload) {\n                window.open(msg.payload, '_blank');\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 610,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "a419e9e367d6a717",
        "type": "mongodb4",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "device",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "getDevice",
        "x": 600,
        "y": 1300,
        "wires": [
            [
                "f49b0d09a33e7b5b"
            ]
        ]
    },
    {
        "id": "e1a692039636ccb6",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "name": "prepareQueryToGetDeviceInDb",
        "func": "const serial = msg.payload;\n\nconst query = { \"_id\": serial };\n\nmsg.payload = [query];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1300,
        "wires": [
            [
                "a419e9e367d6a717"
            ]
        ]
    },
    {
        "id": "f49b0d09a33e7b5b",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "name": "checkDevice",
        "func": "if (msg.payload) {\n    global.set('serial_id', msg.payload._id)\n    const idPremise = msg.payload.id_premise;\n\n    const premiseData = global.get('premiseData') || [];\n\n    const matchedPremise = premiseData.find(premise => premise._id.toString() === idPremise.toString());\n\n    if (matchedPremise) {\n        msg.payload = matchedPremise.name;\n    } else {\n        msg.payload = `Premise with id '${idPremise}' not found in premiseData.`;\n    }\n} else {\n    msg.payload = \"\";\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1300,
        "wires": [
            [
                "fd3a94d5c2f5f41d"
            ]
        ]
    },
    {
        "id": "fd3a94d5c2f5f41d",
        "type": "switch",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "name": "check",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 910,
        "y": 1300,
        "wires": [
            [
                "7f102e07e5ef5c01"
            ],
            [
                "8383793c1105f10c"
            ]
        ]
    },
    {
        "id": "7f102e07e5ef5c01",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "name": "notExists",
        "func": "const deviceData = global.get('serial_id');\nmsg.topic = \"smartoffice/1/\" + deviceData + \"/youare\";\nmsg.payload = \"NONE\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1260,
        "wires": [
            [
                "2e61021ce704dfe4",
                "5c0e85234562f4e2",
                "83519b076962155a"
            ]
        ]
    },
    {
        "id": "8383793c1105f10c",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "name": "exists",
        "func": "const deviceData = global.get('serial_id');\nmsg.topic = \"smartoffice/1/\" + deviceData + \"/youare\";\n\nglobal.set('currentPremise', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1360,
        "wires": [
            [
                "547243056bf26e0a",
                "ee93e7ac092f78b3",
                "83519b076962155a"
            ]
        ]
    },
    {
        "id": "547243056bf26e0a",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "name": "sendYouArePrivate",
        "topic": "",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54759efd76491718",
        "x": 1350,
        "y": 1360,
        "wires": []
    },
    {
        "id": "2e61021ce704dfe4",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "name": "sendYouArePrivate",
        "topic": "",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54759efd76491718",
        "x": 1350,
        "y": 1260,
        "wires": []
    },
    {
        "id": "cc25423c5d8e26d6",
        "type": "mongodb4",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "device",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "createDevice",
        "x": 1470,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "5c0e85234562f4e2",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "name": "createDeviceInDb",
        "func": "const serial_id = global.get('serial_id');\n\nconst deviceObject = {\n    _id: serial_id,  \n    name: \"non défini\" \n};\n\nmsg.payload = deviceObject;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1200,
        "wires": [
            [
                "cc25423c5d8e26d6"
            ]
        ]
    },
    {
        "id": "ddec77a73510afac",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "extractTemperatureFromJson",
        "func": "msg.payload = parseFloat(msg.payload.temperature);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 140,
        "wires": [
            [
                "7ce08affddeab4ea",
                "ee6c97f4e7d07d57",
                "c4e68b2f0ddf484b"
            ]
        ]
    },
    {
        "id": "a092be41ed4f7e6b",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "extractHumidityFromJson",
        "func": "msg.payload = parseInt(msg.payload.humidity, 10);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 300,
        "wires": [
            [
                "8d83378d17572eea",
                "13bba33c4c23465e"
            ]
        ]
    },
    {
        "id": "152d59af688bfd2e",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "02634166f1864967",
        "name": "prepareQueryToUpdatePremise",
        "func": "const currentPremise = global.get('currentPremise');\nconst local1Value = msg.payload.local1;\n\nconst premiseData = global.get('premiseData') || [];\n\nconst matchedPremise = premiseData.find(premise => premise.name === currentPremise);\n\nif (matchedPremise) {\n    msg.payload = {\n        filter: { \"_id\": matchedPremise._id },\n        update: { \"$set\": { \"name\": local1Value } }\n    };\n} else {\n    msg.payload = `Premise with name '${currentPremise}' not found.`;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2420,
        "wires": [
            [
                "8f031aee5b67aa8d"
            ]
        ]
    },
    {
        "id": "8f031aee5b67aa8d",
        "type": "mongodb4",
        "z": "0277478f1e68b0ce",
        "g": "02634166f1864967",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "premise",
        "operation": "updateMany",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "editPremise",
        "x": 670,
        "y": 2420,
        "wires": [
            []
        ]
    },
    {
        "id": "ee6c97f4e7d07d57",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "checkIfTemperatureTooHigh",
        "func": "const deviceData = global.get('serial_id');\n\nif (msg.payload > 28 && !global.get('alarmPrevention')) {\n        msg.topic = \"smartoffice/1/\" + deviceData + \"/lcd\";\n        global.set('alarmText', \"La température est élevée : \" + msg.payload + \"°C\");\n        msg.payload = \"ERROR; La temperature est elevee : \" + msg.payload + \"C\";\n        global.set('alarmPrevention', true)\n} else {\n    msg.topic = \"bin\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 60,
        "wires": [
            [
                "8ee28446dd85d838",
                "2740cf20720b1a61"
            ]
        ]
    },
    {
        "id": "8ee28446dd85d838",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "sendAlarmPrivate",
        "topic": "",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54759efd76491718",
        "x": 1130,
        "y": 60,
        "wires": []
    },
    {
        "id": "dc982ded04959f43",
        "type": "mongodb4",
        "z": "0277478f1e68b0ce",
        "g": "ee2a6888dd01074b",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "log",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findLogsInDb",
        "x": 790,
        "y": 2980,
        "wires": [
            [
                "2028de94f5a9e6f4"
            ]
        ]
    },
    {
        "id": "65a7457d474c2588",
        "type": "inject",
        "z": "0277478f1e68b0ce",
        "g": "ee2a6888dd01074b",
        "name": "triggerEach5seconds",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 2980,
        "wires": [
            [
                "df7d43d2f481b1b0"
            ]
        ]
    },
    {
        "id": "df7d43d2f481b1b0",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "ee2a6888dd01074b",
        "name": "prepareQueryToFetchRfidLogsForCurrentDevice",
        "func": "const serialId = global.get('serial_id');\n\nconst query = { \n    id_device: serialId,\n    topic: { $regex: /rfid/i }\n};\n\nmsg.payload = [query];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 2980,
        "wires": [
            [
                "dc982ded04959f43"
            ]
        ]
    },
    {
        "id": "327033fcf5e4a864",
        "type": "ui_template",
        "z": "0277478f1e68b0ce",
        "g": "ee2a6888dd01074b",
        "group": "eb521a47e9a8db09",
        "name": "displayLogs",
        "order": 1,
        "width": 12,
        "height": 7,
        "format": "<table>\n    <tbody id=\"table-body\">\n        <tr ng-repeat=\"row in msg.payload\">\n            <td>{{ row.readableDate }}</td>\n            <td>{{ row.client }}</td>\n        </tr>\n    </tbody>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1390,
        "y": 2980,
        "wires": [
            []
        ]
    },
    {
        "id": "1e2dc49481d7a43c",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "ee2a6888dd01074b",
        "name": "formatDate",
        "func": "let data = msg.payload;\n\nif (Array.isArray(data)) {\n    data.forEach(item => {\n        if (item.date_log) {\n            let date = new Date(item.date_log);\n            item.readableDate = date.toLocaleString('fr-FR', {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n        }\n    });\n}\n\n\nif (Array.isArray(data)) {\n    flow.set('mongodbData', data);\n}\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 2980,
        "wires": [
            [
                "327033fcf5e4a864"
            ]
        ]
    },
    {
        "id": "2028de94f5a9e6f4",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "ee2a6888dd01074b",
        "name": "joinDataToHaveClient",
        "func": "let logs = msg.payload;\nlet clients = global.get('clientData');\n\nlogs.forEach(log => {\n    let client = clients.find(client => client.rfid === log.value_log.toString());\n    if (client) {\n        log.client = client.firstname + \" \" + client.name;\n    } else {\n        log.client = null; \n    }\n});\n\nmsg.payload = logs;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2980,
        "wires": [
            [
                "1e2dc49481d7a43c"
            ]
        ]
    },
    {
        "id": "6120ee65d788a2ac",
        "type": "inject",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "10minTrigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "c193eb9a4497f2b7"
            ]
        ]
    },
    {
        "id": "c193eb9a4497f2b7",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "resetAlarm",
        "func": "global.set('alarmPrevention', false);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7a4cbfceb7aa3e95",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "prepareMqttToDisableAlarm",
        "func": "const deviceData = global.get('serial_id');\n\nmsg.topic = \"smartoffice/1/\" + deviceData + \"/button\";\nmsg.payload = \"PRESSED\";\nmsg.message = \"\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 600,
        "wires": [
            [
                "b04bf2629fdccf3b",
                "823bbfc739fc0d8f"
            ]
        ]
    },
    {
        "id": "b04bf2629fdccf3b",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "sendDisableAlarmPrivate",
        "topic": "",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54759efd76491718",
        "x": 730,
        "y": 660,
        "wires": []
    },
    {
        "id": "2740cf20720b1a61",
        "type": "change",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "prepareAlertTextToDisplay",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "alarmText",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 120,
        "wires": [
            [
                "75680836e4f80837"
            ]
        ]
    },
    {
        "id": "9b88fd4b128fc57c",
        "type": "ui_text",
        "z": "0277478f1e68b0ce",
        "g": "2b444b808f2003ca",
        "group": "f36af4e5677b5672",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "displayAddress",
        "label": "Localisation détectée",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 560,
        "y": 1800,
        "wires": []
    },
    {
        "id": "5b3126d8779138f9",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "2b444b808f2003ca",
        "name": "formatAddress",
        "func": "const addressObj = msg.payload;\n\nconst address = `${addressObj.house_number}, ${addressObj.road}, ${addressObj.postcode}, ${addressObj.state}, ${addressObj.country}`;\n\nglobal.set('coordinates', {\n    latitude: addressObj.lat,\n    longitude: addressObj.lon\n});\n\nglobal.set('currentAddress', address);\n\nmsg.payload = global.get('currentAddress');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1800,
        "wires": [
            [
                "9b88fd4b128fc57c"
            ]
        ]
    },
    {
        "id": "b66ed4d6167846b0",
        "type": "mqtt in",
        "z": "0277478f1e68b0ce",
        "g": "20dfacadc7600b19",
        "name": "getCameraLinkAndStatus",
        "topic": "smartoffice/1/+/camera",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "54759efd76491718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 1000,
        "wires": [
            [
                "4b8937aa9badfa68",
                "7210d850469831b7",
                "da9aa2f4a85227c4"
            ]
        ]
    },
    {
        "id": "4b8937aa9badfa68",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "20dfacadc7600b19",
        "name": "updateCameraLink",
        "func": "const ip = msg.payload.ip;\nconst status = msg.payload.status;\n\nmsg.payload = global.set('cameraLink', `http://${ip}:8000/camera`);\nmsg.payload = global.set('cameraStatus', status);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "a4648b7c3b62ec2a",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "e47015bbcd561a71",
        "name": "formatDataToLog",
        "func": "const array = msg.payload;\n\nconst rfid = array.map(num => String.fromCharCode(num)).join(\"\");\nconst topic = msg.topic;\nconst device = global.get('serial_id');\nconst premiseName = global.get('currentPremise');\nconst premiseData = global.get('premiseData');\n\nconst matchedPremise = premiseData.find(p => p.name === premiseName);\n\nconst premise_id = matchedPremise ? matchedPremise._id : null;\n\n\nif (!device) {\n    node.error(\"Serial ID not defined in global context.\");\n    return null;\n}\nif (!premiseName) {\n    node.error(\"Premise not defined in global context.\");\n    return null;\n}\n\nlet currentDate = new Date();\nlet currentDateAdjusted = new Date(currentDate.getTime() + currentDate.getTimezoneOffset() * 60000);\n\nmsg.payload = {\n    topic: topic,\n    date_log: new Date().toISOString(),\n    value_log: rfid,\n    id_device: device,\n    id_premise: premise_id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2860,
        "wires": [
            [
                "ad051c630f71aca6",
                "fdb9322806b9d976"
            ]
        ]
    },
    {
        "id": "ad051c630f71aca6",
        "type": "mongodb4",
        "z": "0277478f1e68b0ce",
        "g": "e47015bbcd561a71",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "log",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "generateRfidLog",
        "x": 550,
        "y": 2860,
        "wires": [
            [
                "df7d43d2f481b1b0"
            ]
        ]
    },
    {
        "id": "14a69f243c9384b2",
        "type": "ui_text",
        "z": "0277478f1e68b0ce",
        "g": "20dfacadc7600b19",
        "group": "6d9ac2ca21f48ee4",
        "order": 2,
        "width": 11,
        "height": 1,
        "name": "displayCameraStatus",
        "label": "statut",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 980,
        "y": 940,
        "wires": []
    },
    {
        "id": "7210d850469831b7",
        "type": "change",
        "z": "0277478f1e68b0ce",
        "g": "20dfacadc7600b19",
        "name": "putCameraStatusInPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "cameraStatus",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 940,
        "wires": [
            [
                "11b9a3c190463011"
            ]
        ]
    },
    {
        "id": "11b9a3c190463011",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "20dfacadc7600b19",
        "name": "prepareStatusToDisplay",
        "func": "if(msg.payload) {\n    msg.payload = \"activé\";\n} else {\n    msg.payload = \"désactivé\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 940,
        "wires": [
            [
                "14a69f243c9384b2"
            ]
        ]
    },
    {
        "id": "0bebc33ba9eb758a",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "formatDataToLog",
        "func": "const topic = msg.topic;\nconst device = global.get('serial_id');\nconst premiseName = global.get('currentPremise');\nconst premiseData = global.get('premiseData');\n\nconst matchedPremise = premiseData.find(p => p.name === premiseName);\n\nconst premise_id = matchedPremise ? matchedPremise._id : null;\n\n\nif (!device) {\n    node.error(\"Serial ID not defined in global context.\");\n    return null;\n}\nif (!premiseName) {\n    node.error(\"Premise not defined in global context.\");\n    return null;\n}\n\nmsg.payload = {\n    topic: topic,\n    date_log: new Date().toISOString(),\n    value_log: msg.payload,\n    id_device: device,\n    id_premise: premise_id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 520,
        "wires": [
            [
                "15c91546bc53c7d2",
                "5ff5d5d141451727"
            ]
        ]
    },
    {
        "id": "1aeaa4607ee6b29a",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "2b444b808f2003ca",
        "name": "sendLogPublicSecure",
        "topic": "smartoffice/log",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "64c8814b618a706e",
        "x": 880,
        "y": 1920,
        "wires": []
    },
    {
        "id": "df2886bcb2806c4a",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "1501d7bab16f0152",
        "name": "formatDataToLog",
        "func": "const topic = msg.topic;\nconst device = global.get('serial_id');\nconst premiseName = global.get('currentPremise');\nconst premiseData = global.get('premiseData');\n\nconst matchedPremise = premiseData.find(p => p.name === premiseName);\n\nconst premise_id = matchedPremise ? matchedPremise._id : null;\n\n\nif (!device) {\n    node.error(\"Serial ID not defined in global context.\");\n    return null;\n}\nif (!premiseName) {\n    node.error(\"Premise not defined in global context.\");\n    return null;\n}\n\nmsg.payload = {\n    topic: topic,\n    date_log: new Date().toISOString(),\n    value_log: msg.payload,\n    id_device: device,\n    id_premise: premise_id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2600,
        "wires": [
            [
                "e2c10c63f4e84396",
                "bfdbe67471782da6"
            ]
        ]
    },
    {
        "id": "e5e3745fc8aaf3ec",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "cd6f4e02c3e3acd0",
        "name": "formatDataToLog",
        "func": "const topic = msg.topic;\nconst device = global.get('serial_id');\nconst premiseName = global.get('currentPremise');\nconst premiseData = global.get('premiseData');\n\nconst matchedPremise = premiseData.find(p => p.name === premiseName);\n\nconst premise_id = matchedPremise ? matchedPremise._id : null;\n\n\nif (!device) {\n    node.error(\"Serial ID not defined in global context.\");\n    return null;\n}\nif (!premiseName) {\n    node.error(\"Premise not defined in global context.\");\n    return null;\n}\n\nmsg.payload = {\n    topic: topic,\n    date_log: new Date().toISOString(),\n    value_log: msg.payload,\n    id_device: device,\n    id_premise: premise_id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 3220,
        "wires": [
            [
                "d056b9c31bc3dabe",
                "b163c44657714096"
            ]
        ]
    },
    {
        "id": "da9aa2f4a85227c4",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "20dfacadc7600b19",
        "name": "formatDataToLog",
        "func": "const topic = msg.topic;\nconst device = global.get('serial_id');\nconst premiseName = global.get('currentPremise');\nconst premiseData = global.get('premiseData');\n\nconst matchedPremise = premiseData.find(p => p.name === premiseName);\n\nconst premise_id = matchedPremise ? matchedPremise._id : null;\n\n\nif (!device) {\n    node.error(\"Serial ID not defined in global context.\");\n    return null;\n}\nif (!premiseName) {\n    node.error(\"Premise not defined in global context.\");\n    return null;\n}\n\nmsg.payload = {\n    topic: topic,\n    date_log: new Date().toISOString(),\n    value_log: msg.payload,\n    id_device: device,\n    id_premise: premise_id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1060,
        "wires": [
            [
                "dc21bb075e71a6ab",
                "738570c47c3f2c0f"
            ]
        ]
    },
    {
        "id": "c6f719b6be57c666",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "2b444b808f2003ca",
        "name": "formatDataToLog",
        "func": "const topic = msg.topic;\nconst device = global.get('serial_id');\nconst premiseName = global.get('currentPremise');\nconst premiseData = global.get('premiseData');\n\nconst matchedPremise = premiseData.find(p => p.name === premiseName);\n\nconst premise_id = matchedPremise ? matchedPremise._id : null;\n\n\nif (!device) {\n    node.error(\"Serial ID not defined in global context.\");\n    return null;\n}\nif (!premiseName) {\n    node.error(\"Premise not defined in global context.\");\n    return null;\n}\n\nmsg.payload = {\n    topic: topic,\n    date_log: new Date().toISOString(),\n    value_log: msg.payload,\n    id_device: device,\n    id_premise: premise_id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1860,
        "wires": [
            [
                "5dc1787fd36ea227",
                "421ae207c005b560"
            ]
        ]
    },
    {
        "id": "5dc1787fd36ea227",
        "type": "mongodb4",
        "z": "0277478f1e68b0ce",
        "g": "2b444b808f2003ca",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "log",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "generateLog",
        "x": 550,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "15c91546bc53c7d2",
        "type": "mongodb4",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "log",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "generateLog",
        "x": 750,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "7e4d06239d75c45e",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "sendLogPublicSecure",
        "topic": "smartoffice/log",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "64c8814b618a706e",
        "x": 1100,
        "y": 520,
        "wires": []
    },
    {
        "id": "e2c10c63f4e84396",
        "type": "mongodb4",
        "z": "0277478f1e68b0ce",
        "g": "1501d7bab16f0152",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "log",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "generateLog",
        "x": 630,
        "y": 2540,
        "wires": [
            []
        ]
    },
    {
        "id": "c2d22e93f525737f",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "1501d7bab16f0152",
        "name": "sendLogPublicSecure",
        "topic": "smartoffice/log",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "64c8814b618a706e",
        "x": 940,
        "y": 2600,
        "wires": []
    },
    {
        "id": "d056b9c31bc3dabe",
        "type": "mongodb4",
        "z": "0277478f1e68b0ce",
        "g": "cd6f4e02c3e3acd0",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "log",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "generateLog",
        "x": 690,
        "y": 3140,
        "wires": [
            []
        ]
    },
    {
        "id": "f93ac2a6971844a0",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "cd6f4e02c3e3acd0",
        "name": "sendLogPublicSecure",
        "topic": "smartoffice/log",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "64c8814b618a706e",
        "x": 940,
        "y": 3220,
        "wires": []
    },
    {
        "id": "4431d4db3aa78aee",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "e47015bbcd561a71",
        "name": "sendLogPublicSecure",
        "topic": "smartoffice/log",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "64c8814b618a706e",
        "x": 860,
        "y": 2800,
        "wires": []
    },
    {
        "id": "dc21bb075e71a6ab",
        "type": "mongodb4",
        "z": "0277478f1e68b0ce",
        "g": "20dfacadc7600b19",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "log",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "generateLog",
        "x": 650,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "34f824be3a8439fc",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "20dfacadc7600b19",
        "name": "sendLogPublicSecure",
        "topic": "smartoffice/log",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "64c8814b618a706e",
        "x": 980,
        "y": 1060,
        "wires": []
    },
    {
        "id": "57843337e96261b9",
        "type": "ui_text",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "group": "77cc3ec7a2ad9d4e",
        "order": 2,
        "width": 12,
        "height": 1,
        "name": "displayHumidityIndicator",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "36",
        "color": "#ffffff",
        "x": 1070,
        "y": 380,
        "wires": []
    },
    {
        "id": "13bba33c4c23465e",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "prepareHumidityIndication",
        "func": "let humidity = msg.payload;\n\nlet status = \"\";\n\nif (humidity < 30) {\n    status = \"Sec\";\n} else if (humidity >= 30 && humidity <= 60) {\n    status = \"Humide\";\n} else if (humidity > 60) {\n    status = \"Mouillé\";\n}\n\nmsg.payload = status;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 380,
        "wires": [
            [
                "57843337e96261b9"
            ]
        ]
    },
    {
        "id": "c4e68b2f0ddf484b",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "prepareTemperatureIndication",
        "func": "let temperature = msg.payload;\n\nlet status = \"\";\n\nif (temperature < 18) {\n    status = \"Froid\";\n} else if (temperature >= 18 && temperature <= 24) {\n    status = \"Chaud\";\n} else if (temperature > 28) {\n    status = \"Trop chaud\";\n}\n\nmsg.payload = status;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 220,
        "wires": [
            [
                "bd4e3660d71f5103"
            ]
        ]
    },
    {
        "id": "bd4e3660d71f5103",
        "type": "ui_text",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "group": "eba1eeab2c58edb8",
        "order": 2,
        "width": 12,
        "height": 1,
        "name": "displayTemperatureIndicator",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "36",
        "color": "#ffffff",
        "x": 1100,
        "y": 220,
        "wires": []
    },
    {
        "id": "2272194001cc5497",
        "type": "ui_text",
        "z": "0277478f1e68b0ce",
        "g": "cd6f4e02c3e3acd0",
        "group": "7c4ba8e1e71b582f",
        "order": 2,
        "width": 12,
        "height": 1,
        "name": "displaySoundIncation",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "36",
        "color": "#ffffff",
        "x": 680,
        "y": 3300,
        "wires": []
    },
    {
        "id": "600770e1c9962a12",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "cd6f4e02c3e3acd0",
        "name": "prepareSoundIndication",
        "func": "let sound = msg.payload;\n\nlet status = \"\";\n\nif (sound < 300) {\n    status = \"Silencieux\";\n} else if (sound >= 300) {\n    status = \"Bruillant\";\n}\n\nmsg.payload = status;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 3300,
        "wires": [
            [
                "2272194001cc5497"
            ]
        ]
    },
    {
        "id": "9067218c53ba6cbe",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "1501d7bab16f0152",
        "name": "prepareTemperatureIndication",
        "func": "let light = msg.payload;\n\nlet status = \"\";\n\nif (light < 100) {\n    status = \"Sombre\";\n} else if (light >= 100) {\n    status = \"Eclairé\";\n}\n\nmsg.payload = status;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2660,
        "wires": [
            [
                "f506b700ac5e373b"
            ]
        ]
    },
    {
        "id": "f506b700ac5e373b",
        "type": "ui_text",
        "z": "0277478f1e68b0ce",
        "g": "1501d7bab16f0152",
        "group": "f755c7094e0204d7",
        "order": 2,
        "width": 12,
        "height": 1,
        "name": "displayLightIndication",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "36",
        "color": "#ffffff",
        "x": 700,
        "y": 2660,
        "wires": []
    },
    {
        "id": "52305503b0150169",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "name": "formatDataToLog",
        "func": "const topic = msg.topic;\nconst device = global.get('serial_id');\nconst premiseName = global.get('currentPremise');\nconst premiseData = global.get('premiseData');\n\nconst matchedPremise = premiseData.find(p => p.name === premiseName);\n\nconst premise_id = matchedPremise ? matchedPremise._id : null;\n\n\nif (!device) {\n    node.error(\"Serial ID not defined in global context.\");\n    return null;\n}\nif (!premiseName) {\n    node.error(\"Premise not defined in global context.\");\n    return null;\n}\n\nmsg.payload = {\n    topic: topic,\n    date_log: new Date().toISOString(),\n    value_log: msg.payload,\n    id_device: device,\n    id_premise: premise_id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1180,
        "wires": [
            [
                "86413ad55842e730",
                "418329f2df6a1ff5"
            ]
        ]
    },
    {
        "id": "86413ad55842e730",
        "type": "mongodb4",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "log",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "generateLog",
        "x": 570,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "168eaec1b7a98d4a",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "prepareMqttToDisableAlarm",
        "func": "const deviceData = global.get('serial_id');\n\nmsg.topic = \"smartoffice/1/\" + deviceData + \"/lcd\";\nmsg.payload = \"NONE\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 720,
        "wires": [
            [
                "f62dc34083744dc0",
                "823bbfc739fc0d8f"
            ]
        ]
    },
    {
        "id": "f62dc34083744dc0",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "sendNoneToLcdPrivate",
        "topic": "",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54759efd76491718",
        "x": 1350,
        "y": 720,
        "wires": []
    },
    {
        "id": "d420f6fcbf97a6a1",
        "type": "mqtt in",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "getButtonPressedPrivate",
        "topic": "smartoffice/1/+/button",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "54759efd76491718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 770,
        "y": 720,
        "wires": [
            [
                "168eaec1b7a98d4a"
            ]
        ]
    },
    {
        "id": "c24b96c496942605",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "c8e0075148b8c946",
        "name": "getReservationsForCurrentPremise",
        "func": "let reservationData = global.get('reservationData');\n\nlet currentName = global.get('currentPremise');\n\nlet filteredReservations = reservationData.filter(reservation => reservation.premise_name === currentName);\n\nmsg.payload = filteredReservations;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1620,
        "wires": [
            [
                "38e95f2c24175c35"
            ]
        ]
    },
    {
        "id": "38e95f2c24175c35",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "c8e0075148b8c946",
        "name": "checkIfReservationNow",
        "func": "let filteredReservations = msg.payload;\nlet currentDate = new Date();\nlet result = false;\n\nfor (let reservation of filteredReservations) {\n    let startTime = new Date(reservation.start_time);\n    let endTime = new Date(reservation.end_time);\n    \n    if (currentDate >= startTime && currentDate <= endTime) {\n        result = true;\n        break;\n    }\n}\n\nmsg.payload = result;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1620,
        "wires": [
            [
                "52498b44064f823a"
            ]
        ]
    },
    {
        "id": "52498b44064f823a",
        "type": "switch",
        "z": "0277478f1e68b0ce",
        "g": "c8e0075148b8c946",
        "name": "reservation?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 1620,
        "wires": [
            [
                "ea9465a1fc8c9e18"
            ],
            [
                "cf28368a6c246fc7"
            ]
        ]
    },
    {
        "id": "cf28368a6c246fc7",
        "type": "change",
        "z": "0277478f1e68b0ce",
        "g": "c8e0075148b8c946",
        "name": "no",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Libre",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 1680,
        "wires": [
            [
                "008d0f8c6ef1132f",
                "7e980f13e9bced0d"
            ]
        ]
    },
    {
        "id": "ea9465a1fc8c9e18",
        "type": "change",
        "z": "0277478f1e68b0ce",
        "g": "c8e0075148b8c946",
        "name": "yes",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Occupé",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 1560,
        "wires": [
            [
                "008d0f8c6ef1132f",
                "e9c399127f96be64"
            ]
        ]
    },
    {
        "id": "eead5ce7da467f2e",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "name": "sendLogPublicSecure",
        "topic": "smartoffice/log",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "64c8814b618a706e",
        "x": 860,
        "y": 1240,
        "wires": []
    },
    {
        "id": "bfdbe67471782da6",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "1501d7bab16f0152",
        "name": "convertPremiseIdToName",
        "func": "var premiseId = msg.payload.id_premise;\n\nvar premiseData = global.get('premiseData');\n\nvar premise = premiseData.find(p => String(p._id) === String(premiseId));\n\nif (premise) {\n    msg.payload.id_premise = premise.name;\n} else {\n    node.error(\"Premise not found for ID: \" + premiseId);\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2600,
        "wires": [
            [
                "c2d22e93f525737f"
            ]
        ]
    },
    {
        "id": "5ff5d5d141451727",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "changePremiseIdToPremiseName",
        "func": "var premiseId = msg.payload.id_premise;\n\nvar premiseData = global.get('premiseData');\n\nvar premise = premiseData.find(p => String(p._id) === String(premiseId));\n\nif (premise) {\n    msg.payload.id_premise = premise.name;\n} else {\n    node.error(\"Premise not found for ID: \" + premiseId);\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 520,
        "wires": [
            [
                "7e4d06239d75c45e"
            ]
        ]
    },
    {
        "id": "b163c44657714096",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "cd6f4e02c3e3acd0",
        "name": "convertPremiseIdToName",
        "func": "var premiseId = msg.payload.id_premise;\n\nvar premiseData = global.get('premiseData');\n\nvar premise = premiseData.find(p => String(p._id) === String(premiseId));\n\nif (premise) {\n    msg.payload.id_premise = premise.name;\n} else {\n    node.error(\"Premise not found for ID: \" + premiseId);\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 3220,
        "wires": [
            [
                "f93ac2a6971844a0"
            ]
        ]
    },
    {
        "id": "fdb9322806b9d976",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "e47015bbcd561a71",
        "name": "convertPremiseIdToName",
        "func": "var premiseId = msg.payload.id_premise;\n\nvar premiseData = global.get('premiseData');\n\nvar premise = premiseData.find(p => String(p._id) === String(premiseId));\n\nif (premise) {\n    msg.payload.id_premise = premise.name;\n} else {\n    node.error(\"Premise not found for ID: \" + premiseId);\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2800,
        "wires": [
            [
                "4431d4db3aa78aee"
            ]
        ]
    },
    {
        "id": "738570c47c3f2c0f",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "20dfacadc7600b19",
        "name": "convertPremiseIdToName",
        "func": "var premiseId = msg.payload.id_premise;\n\nvar premiseData = global.get('premiseData');\n\nvar premise = premiseData.find(p => String(p._id) === String(premiseId));\n\nif (premise) {\n    msg.payload.id_premise = premise.name;\n} else {\n    node.error(\"Premise not found for ID: \" + premiseId);\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1060,
        "wires": [
            [
                "34f824be3a8439fc"
            ]
        ]
    },
    {
        "id": "418329f2df6a1ff5",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "name": "convertPremiseIdToName",
        "func": "var premiseId = msg.payload.id_premise;\n\nvar premiseData = global.get('premiseData');\n\nvar premise = premiseData.find(p => String(p._id) === String(premiseId));\n\nif (premise) {\n    msg.payload.id_premise = premise.name;\n} else {\n    node.error(\"Premise not found for ID: \" + premiseId);\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1240,
        "wires": [
            [
                "eead5ce7da467f2e"
            ]
        ]
    },
    {
        "id": "421ae207c005b560",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "2b444b808f2003ca",
        "name": "convertPremiseIdToName",
        "func": "var premiseId = msg.payload.id_premise;\n\nvar premiseData = global.get('premiseData');\n\nvar premise = premiseData.find(p => String(p._id) === String(premiseId));\n\nif (premise) {\n    msg.payload.id_premise = premise.name;\n} else {\n    node.error(\"Premise not found for ID: \" + premiseId);\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1920,
        "wires": [
            [
                "1aeaa4607ee6b29a"
            ]
        ]
    },
    {
        "id": "823bbfc739fc0d8f",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "formatToPublicBroker",
        "func": "const topic = msg.topic;\nconst device = global.get('serial_id');\nconst premiseName = global.get('currentPremise');\n\nif (!device) {\n    node.error(\"Serial ID not defined in global context.\");\n    return null;\n}\nif (!premiseName) {\n    node.error(\"Premise not defined in global context.\");\n    return null;\n}\n\nmsg.payload = {\n    topic: topic,\n    date_log: new Date().toISOString(),\n    value_log: msg.payload,\n    id_device: device,\n    id_premise: premiseName\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 600,
        "wires": [
            [
                "5e9433c8a2cb5521"
            ]
        ]
    },
    {
        "id": "5e9433c8a2cb5521",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "ccb069e81cf069c2",
        "name": "sendLogPublicSecure",
        "topic": "smartoffice/log",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "64c8814b618a706e",
        "x": 1180,
        "y": 600,
        "wires": []
    },
    {
        "id": "83519b076962155a",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "name": "formatToPublicBroker",
        "func": "const topic = msg.topic;\nconst device = global.get('serial_id');\nconst premiseName = global.get('currentPremise');\n\nif (!device) {\n    node.error(\"Serial ID not defined in global context.\");\n    return null;\n}\nif (!premiseName) {\n    node.error(\"Premise not defined in global context.\");\n    return null;\n}\n\nmsg.payload = {\n    topic: topic,\n    date_log: new Date().toISOString(),\n    value_log: msg.payload,\n    id_device: device,\n    id_premise: premiseName\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 1320,
        "wires": [
            [
                "044d98a2b8dc7c7a"
            ]
        ]
    },
    {
        "id": "044d98a2b8dc7c7a",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "0d0f4ba3b295a5e0",
        "name": "sendLogPublicSecure",
        "topic": "smartoffice/log",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "64c8814b618a706e",
        "x": 1720,
        "y": 1320,
        "wires": []
    },
    {
        "id": "3a6fa2bcfc33ca85",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "c8e0075148b8c946",
        "name": "sendLedOnOffPublic",
        "topic": "",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9c09494ed61fa6c9",
        "x": 1460,
        "y": 1620,
        "wires": []
    },
    {
        "id": "e9c399127f96be64",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "c8e0075148b8c946",
        "name": "formatToPrivateBrokerON",
        "func": "const deviceData = global.get('serial_id');\nmsg.topic = \"smartoffice/1/\" + deviceData + \"/led\";\nmsg.payload = \"ON\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1560,
        "wires": [
            [
                "3a6fa2bcfc33ca85",
                "cdf5a67d5c2ad4cf"
            ]
        ]
    },
    {
        "id": "7e980f13e9bced0d",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "c8e0075148b8c946",
        "name": "formatToPrivateBrokerOFF",
        "func": "const deviceData = global.get('serial_id');\nmsg.topic = \"smartoffice/1/\" + deviceData + \"/led\";\nmsg.payload = \"OFF\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1680,
        "wires": [
            [
                "3a6fa2bcfc33ca85",
                "cdf5a67d5c2ad4cf"
            ]
        ]
    },
    {
        "id": "5d363f243f30be67",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "c8e0075148b8c946",
        "name": "sendLogPublicSecure",
        "topic": "smartoffice/log",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "64c8814b618a706e",
        "x": 1940,
        "y": 1620,
        "wires": []
    },
    {
        "id": "cdf5a67d5c2ad4cf",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "c8e0075148b8c946",
        "name": "formatToPublicBroker",
        "func": "const topic = msg.topic;\nconst device = global.get('serial_id');\nconst premiseName = global.get('currentPremise');\n\nif (!device) {\n    node.error(\"Serial ID not defined in global context.\");\n    return null;\n}\nif (!premiseName) {\n    node.error(\"Premise not defined in global context.\");\n    return null;\n}\n\nmsg.payload = {\n    topic: topic,\n    date_log: new Date().toISOString(),\n    value_log: msg.payload,\n    id_device: device,\n    id_premise: premiseName\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 1620,
        "wires": [
            [
                "5d363f243f30be67"
            ]
        ]
    },
    {
        "id": "23c95a9f0540bec5",
        "type": "mqtt in",
        "z": "0277478f1e68b0ce",
        "g": "b2b7d65f2a1b01c8",
        "name": "getRelayPrivate",
        "topic": "smartoffice/1/+/relay",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "54759efd76491718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 2160,
        "wires": [
            [
                "3570325e8b5ae823"
            ]
        ]
    },
    {
        "id": "3570325e8b5ae823",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "b2b7d65f2a1b01c8",
        "name": "formatDataToLog",
        "func": "const topic = msg.topic;\nconst device = global.get('serial_id');\nconst premiseName = global.get('currentPremise');\nconst premiseData = global.get('premiseData');\n\nconst matchedPremise = premiseData.find(p => p.name === premiseName);\n\nconst premise_id = matchedPremise ? matchedPremise._id : null;\n\n\nif (!device) {\n    node.error(\"Serial ID not defined in global context.\");\n    return null;\n}\nif (!premiseName) {\n    node.error(\"Premise not defined in global context.\");\n    return null;\n}\n\nmsg.payload = {\n    topic: topic,\n    date_log: new Date().toISOString(),\n    value_log: msg.payload,\n    id_device: device,\n    id_premise: premise_id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2160,
        "wires": [
            [
                "9bed59b34c201e13",
                "69e27d850cf87988"
            ]
        ]
    },
    {
        "id": "9bed59b34c201e13",
        "type": "mongodb4",
        "z": "0277478f1e68b0ce",
        "g": "b2b7d65f2a1b01c8",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "log",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "generateLog",
        "x": 570,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "69e27d850cf87988",
        "type": "function",
        "z": "0277478f1e68b0ce",
        "g": "b2b7d65f2a1b01c8",
        "name": "convertPremiseIdToName",
        "func": "var premiseId = msg.payload.id_premise;\n\nvar premiseData = global.get('premiseData');\n\nvar premise = premiseData.find(p => String(p._id) === String(premiseId));\n\nif (premise) {\n    msg.payload.id_premise = premise.name;\n} else {\n    node.error(\"Premise not found for ID: \" + premiseId);\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2240,
        "wires": [
            [
                "2295aae27696080b",
                "12d36d88e9171d2f"
            ]
        ]
    },
    {
        "id": "2295aae27696080b",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "b2b7d65f2a1b01c8",
        "name": "sendLogPublicSecure",
        "topic": "smartoffice/log",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "64c8814b618a706e",
        "x": 900,
        "y": 2240,
        "wires": []
    },
    {
        "id": "12d36d88e9171d2f",
        "type": "mqtt out",
        "z": "0277478f1e68b0ce",
        "g": "b2b7d65f2a1b01c8",
        "name": "sendLogPublic",
        "topic": "smartoffice/log",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9c09494ed61fa6c9",
        "x": 880,
        "y": 2300,
        "wires": []
    },
    {
        "id": "97f9a05c2395bb73",
        "type": "inject",
        "z": "0277478f1e68b0ce",
        "name": "triggerBeginningProgram",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2020,
        "wires": [
            [
                "8b5175397bc078be"
            ]
        ]
    },
    {
        "id": "8b5175397bc078be",
        "type": "change",
        "z": "0277478f1e68b0ce",
        "name": "setDefaultAddress",
        "rules": [
            {
                "t": "set",
                "p": "currentAddress",
                "pt": "global",
                "to": "En attente d'un signal du SmartOffice",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 2020,
        "wires": [
            [
                "eae75b0f98c2f85d"
            ]
        ]
    },
    {
        "id": "eae75b0f98c2f85d",
        "type": "change",
        "z": "0277478f1e68b0ce",
        "name": "getDefaultAddress",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "currentAddress",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 2020,
        "wires": [
            [
                "9b88fd4b128fc57c"
            ]
        ]
    },
    {
        "id": "4c27675628385ea0",
        "type": "ui_text",
        "z": "4e821b48bbd42ca3",
        "group": "1760465bb1ca33bd",
        "order": 1,
        "width": 24,
        "height": 1,
        "name": "displayTitle",
        "label": "Vue d'ensemble",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "32",
        "color": "#ffffff",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "55b5a88e854315aa",
        "type": "ui_button",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "rpi1",
        "group": "841582caaa17523e",
        "order": 1,
        "width": 12,
        "height": 1,
        "passthru": false,
        "label": "290A",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "redirect1",
        "payloadType": "global",
        "topic": "",
        "topicType": "str",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "a580835a1833e887"
            ]
        ]
    },
    {
        "id": "a91a3199ac6a18da",
        "type": "ui_text",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "group": "841582caaa17523e",
        "order": 2,
        "width": 12,
        "height": 1,
        "name": "displayIfRpiIsActive",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#33d17a",
        "x": 1210,
        "y": 260,
        "wires": []
    },
    {
        "id": "209054f98f416386",
        "type": "ui_text",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "group": "841582caaa17523e",
        "order": 3,
        "width": 12,
        "height": 1,
        "name": "displayIfRpiIsFree",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#e01b24",
        "x": 1150,
        "y": 400,
        "wires": []
    },
    {
        "id": "68e0cfa4b06db715",
        "type": "ui_ui_control",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "switch",
        "events": "change",
        "x": 470,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a580835a1833e887",
        "type": "change",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "switchToRpi",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"tab\":\"RPI\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "68e0cfa4b06db715"
            ]
        ]
    },
    {
        "id": "5588a030b4ba3054",
        "type": "ui_button",
        "z": "4e821b48bbd42ca3",
        "d": true,
        "g": "829459fd4bc2bd59",
        "name": "rpi2",
        "group": "841582caaa17523e",
        "order": 6,
        "width": 12,
        "height": 1,
        "passthru": false,
        "label": "290C",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "redirect1",
        "payloadType": "global",
        "topic": "",
        "topicType": "str",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "4a0e9bc2ee73a43b",
                "99e8dec59f4301b0",
                "3244fdb1a10c6c55"
            ]
        ]
    },
    {
        "id": "4a0e9bc2ee73a43b",
        "type": "ui_text",
        "z": "4e821b48bbd42ca3",
        "d": true,
        "g": "829459fd4bc2bd59",
        "group": "841582caaa17523e",
        "order": 8,
        "width": 12,
        "height": 1,
        "name": "is_active",
        "label": "innactif",
        "format": "",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#c01c28",
        "x": 340,
        "y": 580,
        "wires": []
    },
    {
        "id": "99e8dec59f4301b0",
        "type": "ui_text",
        "z": "4e821b48bbd42ca3",
        "d": true,
        "g": "829459fd4bc2bd59",
        "group": "841582caaa17523e",
        "order": 7,
        "width": 12,
        "height": 1,
        "name": "is_free",
        "label": "libre",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#57e389",
        "x": 330,
        "y": 640,
        "wires": []
    },
    {
        "id": "1a334ccfcf23875f",
        "type": "ui_ui_control",
        "z": "4e821b48bbd42ca3",
        "d": true,
        "g": "829459fd4bc2bd59",
        "name": "",
        "events": "change",
        "x": 700,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "3244fdb1a10c6c55",
        "type": "change",
        "z": "4e821b48bbd42ca3",
        "d": true,
        "g": "829459fd4bc2bd59",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"tab\":\"RPI\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 580,
        "wires": [
            [
                "1a334ccfcf23875f"
            ]
        ]
    },
    {
        "id": "fb85b18a99c3394a",
        "type": "ui_gauge",
        "z": "4e821b48bbd42ca3",
        "name": "displayCoQuantity",
        "group": "7fda8290ea03273e",
        "order": 2,
        "width": 7,
        "height": 6,
        "gtype": "donut",
        "title": "Quantité de CO",
        "label": "",
        "format": "{{value}} (µg/m3)",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50",
        "seg2": "100",
        "diff": false,
        "className": "",
        "x": 1590,
        "y": 660,
        "wires": []
    },
    {
        "id": "2b2f7c601b02fc11",
        "type": "ui_text",
        "z": "4e821b48bbd42ca3",
        "group": "8753015cdcb44cc3",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "displayAddress",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "32",
        "color": "#ffffff",
        "x": 880,
        "y": 100,
        "wires": []
    },
    {
        "id": "7d7db317f38e1625",
        "type": "ui_worldmap",
        "z": "4e821b48bbd42ca3",
        "group": "8753015cdcb44cc3",
        "order": 2,
        "width": 12,
        "height": 5,
        "name": "",
        "lat": "50.620788",
        "lon": "5.581412",
        "zoom": "18",
        "layer": "OSMC",
        "cluster": "",
        "maxage": "",
        "usermenu": "hide",
        "layers": "hide",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "true",
        "hiderightclick": "true",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR",
        "maplist": "OSMC",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 860,
        "y": 40,
        "wires": []
    },
    {
        "id": "eb17202416c7c47c",
        "type": "function",
        "z": "4e821b48bbd42ca3",
        "name": "injectCoordinatesToWorldmap",
        "func": "const lat = global.get('coordinates').latitude;\nconst lon = global.get('coordinates').longitude;\nconst name = global.get('currentPremise');\n\nmsg.payload = {\n    lat: lat,  // Latitude\n    lon: lon,   // Longitude\n    name: name,\n    icon: \"fa fa-map-marker\",\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 40,
        "wires": [
            [
                "7d7db317f38e1625"
            ]
        ]
    },
    {
        "id": "4f7dd4b144e7f41d",
        "type": "ui_text",
        "z": "4e821b48bbd42ca3",
        "group": "7fda8290ea03273e",
        "order": 1,
        "width": 5,
        "height": 6,
        "name": "displayAirQuality",
        "label": "Qualité globale de l'air",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "24",
        "color": "#ffffff",
        "x": 1870,
        "y": 800,
        "wires": []
    },
    {
        "id": "db9490194e0d84ad",
        "type": "function",
        "z": "4e821b48bbd42ca3",
        "name": "getLatAndLonFromGlobalVariables",
        "func": "var coordinates = global.get(\"coordinates\");\n\nif (coordinates && coordinates.latitude && coordinates.longitude) {\n    var lat = coordinates.latitude;\n    var lon = coordinates.longitude;\n    msg.payload = `${lat} ${lon}`;\n\n    return msg;\n} else {\n    node.error(\"Coordinates not found in global context\", msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 740,
        "wires": [
            [
                "f99b355d863dff2e"
            ]
        ]
    },
    {
        "id": "867dd12675ba7723",
        "type": "inject",
        "z": "4e821b48bbd42ca3",
        "name": "triggerApiAirQualityEach15seconds",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 740,
        "wires": [
            [
                "4b4ad7fb32e36f09"
            ]
        ]
    },
    {
        "id": "6442631fb648dd6a",
        "type": "function",
        "z": "4e821b48bbd42ca3",
        "name": "convertAirQualityIntoString",
        "func": "if (msg.payload >= 0 && msg.payload <= 50) {\n    msg.payload = \"Bonne\";\n} else if (msg.payload > 50 && msg.payload <= 100) {\n    msg.payload = \"Modérée\";\n} else if (msg.payload > 100) {\n    msg.payload = \"Mauvaise\";\n} else {\n    msg.payload = \"Valeur invalide\";\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 740,
        "wires": [
            [
                "4f7dd4b144e7f41d"
            ]
        ]
    },
    {
        "id": "f99b355d863dff2e",
        "type": "exec",
        "z": "4e821b48bbd42ca3",
        "command": "python3 python_request.py ${payload}",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "api_python_requests",
        "x": 1120,
        "y": 740,
        "wires": [
            [
                "413463b444a6cc80"
            ],
            [],
            []
        ]
    },
    {
        "id": "413463b444a6cc80",
        "type": "function",
        "z": "4e821b48bbd42ca3",
        "name": "parseValueToInt",
        "func": "msg.payload = parseInt(msg.payload, 10);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 740,
        "wires": [
            [
                "6442631fb648dd6a",
                "fb85b18a99c3394a"
            ]
        ]
    },
    {
        "id": "b7dfce441a268d6f",
        "type": "inject",
        "z": "4e821b48bbd42ca3",
        "name": "triggerGpsCoordinates",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 40,
        "wires": [
            [
                "5b169e960d830605",
                "eb17202416c7c47c"
            ]
        ]
    },
    {
        "id": "5b169e960d830605",
        "type": "change",
        "z": "4e821b48bbd42ca3",
        "name": "prepareToDisplayAddress",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "currentAddress",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 100,
        "wires": [
            [
                "2b2f7c601b02fc11"
            ]
        ]
    },
    {
        "id": "e76a965d86634085",
        "type": "function",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "getReservationsForThisRpi",
        "func": "let reservationData = global.get('reservationData');\n\nlet currentName = global.get('currentPremise');\n\nlet filteredReservations = reservationData.filter(reservation => reservation.premise_name === currentName);\n\nmsg.payload = filteredReservations;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 400,
        "wires": [
            [
                "5ff74dcd7064a6fa"
            ]
        ]
    },
    {
        "id": "5ff74dcd7064a6fa",
        "type": "function",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "checkIfReservationNowForThisRpi",
        "func": "let filteredReservations = msg.payload;\nlet currentDate = new Date();\nlet result = false;\n\nfor (let reservation of filteredReservations) {\n    let startTime = new Date(reservation.start_time);\n    let endTime = new Date(reservation.end_time);\n    \n    if (currentDate >= startTime && currentDate <= endTime) {\n        result = true;\n        break;\n    }\n}\n\nmsg.payload = result;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 400,
        "wires": [
            [
                "fde7679c576a0709"
            ]
        ]
    },
    {
        "id": "fde7679c576a0709",
        "type": "switch",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "reservation?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 400,
        "wires": [
            [
                "287aae9a9238b558"
            ],
            [
                "c10f6f1561b6cd40"
            ]
        ]
    },
    {
        "id": "287aae9a9238b558",
        "type": "change",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "yes",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Occupé",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 360,
        "wires": [
            [
                "209054f98f416386"
            ]
        ]
    },
    {
        "id": "c10f6f1561b6cd40",
        "type": "change",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "no",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Libre",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 440,
        "wires": [
            [
                "209054f98f416386"
            ]
        ]
    },
    {
        "id": "38d122b3c3b12009",
        "type": "mqtt in",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "helloPrivate",
        "topic": "smartoffice/1/+/hello",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "54759efd76491718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 260,
        "wires": [
            [
                "e76a965d86634085",
                "b938c7cb121c53e7",
                "e81a75bf50a618c9"
            ]
        ]
    },
    {
        "id": "b938c7cb121c53e7",
        "type": "change",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "setRpiAsActive",
        "rules": [
            {
                "t": "set",
                "p": "rpiActive",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 320,
        "wires": [
            [
                "6fab27b9c05f9df7"
            ]
        ]
    },
    {
        "id": "6fab27b9c05f9df7",
        "type": "function",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "checkIfRpiIsActive",
        "func": "const isActive = global.get('rpiActive');\n\nif(isActive) {\n    msg.payload = \"Actif\";\n} else {\n    msg.payload = \"Inactif\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 320,
        "wires": [
            [
                "a91a3199ac6a18da"
            ]
        ]
    },
    {
        "id": "e81a75bf50a618c9",
        "type": "delay",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "intervalDeadToConsiderRpiInactive",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 260,
        "wires": [
            [
                "07a0fd7fb6a301ec"
            ]
        ]
    },
    {
        "id": "07a0fd7fb6a301ec",
        "type": "change",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "setRpiAsInactive",
        "rules": [
            {
                "t": "set",
                "p": "rpiActive",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 260,
        "wires": [
            [
                "6fab27b9c05f9df7"
            ]
        ]
    },
    {
        "id": "4e8fbb7da98c1491",
        "type": "inject",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "triggerDisplayInactive",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 780,
        "y": 180,
        "wires": [
            [
                "5e3ff8dfc9d6ba90"
            ]
        ]
    },
    {
        "id": "5e3ff8dfc9d6ba90",
        "type": "change",
        "z": "4e821b48bbd42ca3",
        "g": "50484f8edde3dcf6",
        "name": "setRpiInactive",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Inactif",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 180,
        "wires": [
            [
                "a91a3199ac6a18da"
            ]
        ]
    },
    {
        "id": "4b4ad7fb32e36f09",
        "type": "switch",
        "z": "4e821b48bbd42ca3",
        "name": "coordinates?",
        "property": "coordinates",
        "propertyType": "global",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 740,
        "wires": [
            [
                "db9490194e0d84ad"
            ],
            [
                "8899601f92d9e4d2"
            ]
        ]
    },
    {
        "id": "8899601f92d9e4d2",
        "type": "function",
        "z": "4e821b48bbd42ca3",
        "name": "waitForSignal",
        "func": "msg.payload = global.get('currentAddress');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 880,
        "wires": [
            [
                "4f7dd4b144e7f41d"
            ]
        ]
    },
    {
        "id": "ef266be67d609a53",
        "type": "ui_text",
        "z": "4db1d4819dfea4ef",
        "group": "821b48d3e4d5beb6",
        "order": 1,
        "width": 19,
        "height": 1,
        "name": "displayPageTitle",
        "label": "Réservation",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "32",
        "color": "#ffffff",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "b54ecb6b4b720a44",
        "type": "ui_button",
        "z": "4db1d4819dfea4ef",
        "name": "buttonReservation",
        "group": "821b48d3e4d5beb6",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Réserver",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 410,
        "y": 60,
        "wires": [
            [
                "64aebe12c013e608"
            ]
        ]
    },
    {
        "id": "982bdb0a083bd7bd",
        "type": "ui_ui_control",
        "z": "4db1d4819dfea4ef",
        "name": "doSwitch",
        "events": "change",
        "x": 900,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "64aebe12c013e608",
        "type": "change",
        "z": "4db1d4819dfea4ef",
        "name": "switchToCreateReservation",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"tab\":\"1Reservation\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 60,
        "wires": [
            [
                "982bdb0a083bd7bd"
            ]
        ]
    },
    {
        "id": "5d4a41df373f227d",
        "type": "mongodb4",
        "z": "4db1d4819dfea4ef",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "reservation",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "fetchReservationsInDb",
        "x": 740,
        "y": 180,
        "wires": [
            [
                "3df8284650839b33"
            ]
        ]
    },
    {
        "id": "e620b61b5850c836",
        "type": "inject",
        "z": "4db1d4819dfea4ef",
        "name": "triggerEach5sec",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "547d7b722673664e"
            ]
        ]
    },
    {
        "id": "547d7b722673664e",
        "type": "function",
        "z": "4db1d4819dfea4ef",
        "name": "prepareQueryToFetchReservationsFromDb",
        "func": "const query = { };\n\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 180,
        "wires": [
            [
                "5d4a41df373f227d"
            ]
        ]
    },
    {
        "id": "d2d764f24a97ca5f",
        "type": "function",
        "z": "4db1d4819dfea4ef",
        "name": "addActionButtonAndFormatDateToDisplay",
        "func": "let reservations = msg.payload;\n\nif (Array.isArray(reservations)) {\n    reservations.forEach(item => {\n        if (item.start_time) {\n            let date = new Date(item.start_time); // Convertir en objet Date\n            item.start_time_readable = date.toLocaleString('fr-FR', {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            }); // Reformater en une date lisible\n        }\n        if (item.end_time) {\n            let date = new Date(item.end_time); // Convertir en objet Date\n            item.end_time_readable = date.toLocaleString('fr-FR', {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            }); // Reformater en une date lisible\n        }\n    });\n}\nreservations = reservations.map(reservation => {\n    reservation.action = `<a href=\"/cancel_booking?id=${reservation._id}\">Annuler</a>`;\n    return reservation;\n});\n\n\nmsg.payload = reservations;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 260,
        "wires": [
            [
                "988308436198a81e"
            ]
        ]
    },
    {
        "id": "988308436198a81e",
        "type": "ui_template",
        "z": "4db1d4819dfea4ef",
        "group": "821b48d3e4d5beb6",
        "name": "displayReservationsInTable",
        "order": 4,
        "width": 22,
        "height": 5,
        "format": "<table>\n    <thead>\n        <tr>\n            <th>Client</th>\n            <th>Local</th>\n            <th>Début</th>\n            <th>Fin</th>\n            <th>Action</th>\n        </tr>\n    </thead>\n    <tbody id=\"table-body\">\n        <tr ng-repeat=\"row in msg.payload\">\n            <td>{{ row.client_email }}</td>\n            <td>{{ row.premise_name }}</td>\n            <td>{{ row.start_time_readable }}</td>\n            <td>{{ row.end_time_readable }}</td>\n            <td ng-bind-html=\"row.action\"></td>\n        </tr>\n    </tbody>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "reservation_table_smartoffice",
        "x": 1580,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "3df8284650839b33",
        "type": "function",
        "z": "4db1d4819dfea4ef",
        "name": "joinDataToHaveClientAndPremise",
        "func": "let reservations = msg.payload;\nglobal.set('reservationData', reservations)\nlet clients = global.get('clientData');\nlet premises = global.get('premiseData');\n\n// Ajouter email et name aux objets de reservation\nreservations.forEach(reservation => {\n    // Trouver le client correspondant à id_client\n    let client = clients.find(client => reservation.id_client && client._id && client._id.toString() === reservation.id_client.toString());\n    if (client) {\n        reservation.client_email = client.email;\n    } else {\n        reservation.client_email = null; // ou une valeur par défaut\n    }\n\n    // Trouver la premise correspondant à id_premise\n    let premise = premises.find(premise => reservation.id_premise && premise._id && premise._id.toString() === reservation.id_premise.toString());\n    if (premise) {\n        reservation.premise_name = premise.name;\n    } else {\n        reservation.premise_name = null; // ou une valeur par défaut\n    }\n});\n\nmsg.payload = reservations;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 260,
        "wires": [
            [
                "d2d764f24a97ca5f"
            ]
        ]
    },
    {
        "id": "5d123201b01615c5",
        "type": "http in",
        "z": "4db1d4819dfea4ef",
        "name": "cancel_booking_request_http",
        "url": "/cancel_booking",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 340,
        "wires": [
            [
                "87b77c671fe9d809"
            ]
        ]
    },
    {
        "id": "87b77c671fe9d809",
        "type": "function",
        "z": "4db1d4819dfea4ef",
        "name": "prepareQueryToDeleteReservation",
        "func": "let reservations = global.get('reservationData');\n\nlet reservationId = msg.req.query.id;\n\nlet reservation = reservations.find(reservation => reservation._id.toString() === reservationId);\n\ndelete reservation.action;\ndelete reservation.premise_name;\ndelete reservation.client_email;\ndelete reservation.start_time;\ndelete reservation.end_time;\ndelete reservation.end_time_readable;\ndelete reservation.start_time_readable;\n\nif (reservation) {\n    msg.payload = reservation;\n} else {\n    msg.payload = { message: \"Réservation non trouvée\" };\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 340,
        "wires": [
            [
                "f1fd48d9d3b2017d"
            ]
        ]
    },
    {
        "id": "1968917eb0d9146d",
        "type": "function",
        "z": "4db1d4819dfea4ef",
        "name": "prepareToRefreshReservations",
        "func": "msg.statusCode = 302;\nmsg.headers = { location: \"/#!/1\" }; // Lien vers lequel rediriger\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 340,
        "wires": [
            [
                "c8bddb85ddc80226"
            ]
        ]
    },
    {
        "id": "c8bddb85ddc80226",
        "type": "http response",
        "z": "4db1d4819dfea4ef",
        "name": "refreshPageUsingHttpRequest",
        "statusCode": "",
        "headers": {},
        "x": 1350,
        "y": 340,
        "wires": []
    },
    {
        "id": "f1fd48d9d3b2017d",
        "type": "mongodb4",
        "z": "4db1d4819dfea4ef",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "reservation",
        "operation": "deleteOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "RemoveReservationInDb",
        "x": 750,
        "y": 340,
        "wires": [
            [
                "1968917eb0d9146d"
            ]
        ]
    },
    {
        "id": "be0b18b31c0adf57",
        "type": "ui_form",
        "z": "df1a303ec9e1b819",
        "name": "reservationForm",
        "label": "",
        "group": "ca6e864468baaad4",
        "order": 3,
        "width": 20,
        "height": 1,
        "options": [
            {
                "label": "Utilisateur",
                "value": "id_client",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Local",
                "value": "id_premise",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Début",
                "value": "start_date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Heure",
                "value": "start_time",
                "type": "time",
                "required": true,
                "rows": null
            },
            {
                "label": "Fin",
                "value": "end_date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Heure",
                "value": "end_time",
                "type": "time",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "id_client": "",
            "id_premise": "",
            "start_date": "",
            "start_time": "",
            "end_date": "",
            "end_time": ""
        },
        "payload": "",
        "submit": "Réserver",
        "cancel": "Annuler",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 680,
        "y": 280,
        "wires": [
            [
                "c7c3bb6395593a9c"
            ]
        ]
    },
    {
        "id": "f7b193dda725f7f2",
        "type": "ui_text",
        "z": "df1a303ec9e1b819",
        "group": "ca6e864468baaad4",
        "order": 2,
        "width": 20,
        "height": 1,
        "name": "displayTitle",
        "label": "Réservation > ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "32",
        "color": "#ffffff",
        "x": 330,
        "y": 80,
        "wires": []
    },
    {
        "id": "b182437a122655b4",
        "type": "inject",
        "z": "df1a303ec9e1b819",
        "name": "trigger",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "Réserver",
        "payloadType": "str",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "f7b193dda725f7f2",
                "665db45f4d7359c0",
                "bf4d56d9869cd0c9"
            ]
        ]
    },
    {
        "id": "55ea4423867b72a4",
        "type": "ui_dropdown",
        "z": "df1a303ec9e1b819",
        "d": true,
        "name": "clients_dropdown",
        "label": "",
        "tooltip": "",
        "place": "Choisir un client",
        "group": "ca6e864468baaad4",
        "order": 1,
        "width": 20,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 630,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "665db45f4d7359c0",
        "type": "function",
        "z": "df1a303ec9e1b819",
        "name": "getClientsToPutInDropdown",
        "func": "let data = global.get('clientData');\nmsg.options = data.map(client => client.email);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "55ea4423867b72a4"
            ]
        ]
    },
    {
        "id": "c7c3bb6395593a9c",
        "type": "function",
        "z": "df1a303ec9e1b819",
        "name": "reformatReservationToPutInDb",
        "func": "// Récupérer le message payload\nlet data = msg.payload;\n\n// Récupérer les données client depuis la variable globale\nlet clientData = global.get('clientData');\nlet premiseData = global.get('premiseData');\n\n// Regrouper start_date et start_time dans une nouvelle clé start_datetime\nlet startDate = new Date(data.start_date);\nlet startTime = new Date(data.start_time);\nstartDate.setHours(startTime.getHours());\nstartDate.setMinutes(startTime.getMinutes());\nstartDate.setSeconds(startTime.getSeconds());\ndata.start_time = startDate.toISOString(); // Formater la date résultante\n\n// Regrouper end_date et end_time dans une nouvelle clé end_datetime\nlet endDate = new Date(data.end_date);\nlet endTime = new Date(data.end_time);\nendDate.setHours(endTime.getHours());\nendDate.setMinutes(endTime.getMinutes());\nendDate.setSeconds(endTime.getSeconds());\ndata.end_time = endDate.toISOString(); // Formater la date résultante\n\n// Remplacer id_client par _id du client correspondant\nlet client = clientData.find(client => client.email === data.id_client);\nif (client) {\n    data.id_client = client._id;\n} else {\n    // Si aucun client n'est trouvé, garder l'ID initial ou gérer l'erreur\n    data.id_client = null;\n}\n\nlet premise = premiseData.find(premise => premise.name === data.id_premise);\nif (client) {\n    data.id_premise = premise._id;\n} else {\n    // Si aucun client n'est trouvé, garder l'ID initial ou gérer l'erreur\n    data.id_premise = null;\n}\n\n// Supprimer les anciens champs\ndelete data.start_date;\ndelete data.end_date;\n\nmsg.payload = data;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 280,
        "wires": [
            [
                "e595840b287591df"
            ]
        ]
    },
    {
        "id": "e595840b287591df",
        "type": "mongodb4",
        "z": "df1a303ec9e1b819",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "reservation",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "createReservationInDb",
        "x": 1220,
        "y": 280,
        "wires": [
            [
                "cc714ee28301d5b1"
            ]
        ]
    },
    {
        "id": "cc714ee28301d5b1",
        "type": "function",
        "z": "df1a303ec9e1b819",
        "name": "switchToReservationsPage",
        "func": "msg.payload = {\"tab\":\"Réservation\"};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 280,
        "wires": [
            [
                "0b9cfdfd3387f444"
            ]
        ]
    },
    {
        "id": "0b9cfdfd3387f444",
        "type": "ui_ui_control",
        "z": "df1a303ec9e1b819",
        "name": "switchTab",
        "events": "all",
        "x": 1700,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "bf4d56d9869cd0c9",
        "type": "function",
        "z": "df1a303ec9e1b819",
        "name": "prepareFormWithActualDateAndHour",
        "func": "function roundToNext30Minutes(date) {\n    const roundedDate = new Date(date);\n    const minutes = roundedDate.getMinutes();\n    roundedDate.setMinutes(minutes < 30 ? 30 : 0); // Passe à la prochaine demi-heure\n    roundedDate.setHours(roundedDate.getHours() + (minutes >= 30 ? 1 : 0)); // Incrémente l'heure si nécessaire\n    roundedDate.setSeconds(0, 0); // Réinitialise les secondes et millisecondes\n    return roundedDate;\n}\n\nconst now = new Date();\nconst roundedNow = roundToNext30Minutes(now);\n\nconst today = now.toISOString().split('T')[0];\n\nfunction formatISOTime(date) {\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    return `1970-01-01T${hours}:${minutes}`;\n}\n\nconst startTime = formatISOTime(roundedNow); // Heure locale arrondie à la demi-heure suivante\nconst endTimeDate = new Date(roundedNow.getTime() + 60 * 60 * 1000); // +1 heure\nconst endTime = formatISOTime(endTimeDate); // Heure locale +1h\n\nmsg.payload = {\n    start_date: today,\n    start_time: startTime,\n    end_date: today,\n    end_time: endTime\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "be0b18b31c0adf57"
            ]
        ]
    },
    {
        "id": "065d264aa47c211a",
        "type": "ui_text",
        "z": "d959e01e9af70966",
        "group": "b255ced8c894f4f0",
        "order": 1,
        "width": 20,
        "height": 1,
        "name": "displayTitle",
        "label": "Support",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "32",
        "color": "#ffffff",
        "x": 130,
        "y": 60,
        "wires": []
    },
    {
        "id": "0822e0a08a81e9e3",
        "type": "ui_button",
        "z": "d959e01e9af70966",
        "name": "supportButton",
        "group": "b255ced8c894f4f0",
        "order": 5,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Accéder au support WebEx",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "1e4cc66b57ed2b56"
            ]
        ]
    },
    {
        "id": "1e4cc66b57ed2b56",
        "type": "function",
        "z": "d959e01e9af70966",
        "name": "containsLinkToWebex",
        "func": "msg.payload = \"https://web.webex.com/spaces/aHR0cHM6Ly9jb252LWsud2J4Mi5jb20vY29udmVyc2F0aW9uL2FwaS92MS9jb252ZXJzYXRpb25zLzZmNTg2ODcwLThkMzYtMTFlZi05NGM2LWZiYThmZGViNmE3ZA==\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "c26166e6305d6f8e"
            ]
        ]
    },
    {
        "id": "c26166e6305d6f8e",
        "type": "ui_template",
        "z": "d959e01e9af70966",
        "group": "b255ced8c894f4f0",
        "name": "redirectToLink",
        "order": 9,
        "width": 20,
        "height": 1,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg && msg.payload) {\n                window.open(msg.payload, '_blank');\n            }\n        });\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 640,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "22b93b9e152a72e5",
        "type": "ui_text",
        "z": "0ab432dc59b6d0a3",
        "group": "f87d496c91fac1c3",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "displayTitle",
        "label": "Logs",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "32",
        "color": "#ffffff",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "67e4568a7a3501fe",
        "type": "ui_date_picker",
        "z": "0ab432dc59b6d0a3",
        "name": "searchByDateButton",
        "label": "Rechercher par date",
        "group": "f87d496c91fac1c3",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 600,
        "y": 60,
        "wires": [
            [
                "a657d51e759ff876"
            ]
        ]
    },
    {
        "id": "eb75d147338e0d5e",
        "type": "mongodb4",
        "z": "0ab432dc59b6d0a3",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "log",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "fetchLogsInDb",
        "x": 720,
        "y": 240,
        "wires": [
            [
                "7878dc4f22923344"
            ]
        ]
    },
    {
        "id": "62b35b4144bc0c52",
        "type": "function",
        "z": "0ab432dc59b6d0a3",
        "name": "prepareQueryToFetchInDb",
        "func": "const query = { };\n\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 200,
        "wires": [
            [
                "eb75d147338e0d5e"
            ]
        ]
    },
    {
        "id": "5df8d8e55bcfaa12",
        "type": "ui_template",
        "z": "0ab432dc59b6d0a3",
        "group": "f87d496c91fac1c3",
        "name": "displayLogsInTable",
        "order": 7,
        "width": 20,
        "height": 6,
        "format": "<table>\n    <thead>\n        <tr>\n            <th>Id</th>\n            <th>Local</th>\n            <th>Topic</th>\n            <th>Date</th>\n            <th>Valeur</th>\n        </tr>\n    </thead>\n    <tbody id=\"table-body\">\n        <tr ng-repeat=\"row in msg.payload\">\n            <td>{{ row._id }}</td>\n            <td>{{ row.premise_name }}</td>\n            <td>{{ row.topic }}</td>\n            <td>{{ row.readableDate }}</td>\n            <td>{{ row.value_log }}</td>\n        </tr>\n    </tbody>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "logs_table_smartoffice",
        "x": 1630,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "2cf404800ccde71e",
        "type": "function",
        "z": "0ab432dc59b6d0a3",
        "name": "formatDateAndGet100LastLogs",
        "func": "let data = msg.payload;\n\nif (Array.isArray(data)) {\n    data.forEach(item => {\n        if (item.date_log) {\n            let date = new Date(item.date_log);\n            item.readableDate = date.toLocaleString('fr-FR', {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n        }\n    });\n}\n\n\nif (Array.isArray(data)) {\n    data.reverse();\n    flow.set('mongodbData', data);\n    data = data.slice(0, 100);\n    flow.set('mongodbData100', data);\n}\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 240,
        "wires": [
            [
                "5df8d8e55bcfaa12"
            ]
        ]
    },
    {
        "id": "a657d51e759ff876",
        "type": "function",
        "z": "0ab432dc59b6d0a3",
        "name": "sortByDateFunction",
        "func": "let data = flow.get(\"mongodbData\");\n\nif (!Array.isArray(data)) {\n    msg.payload = { status: \"mongodbData is not an array or not found\" };\n    return msg;  // Quitte tôt si 'data' n'est pas un tableau\n}\n\nlet timestamp = msg.payload; \nlet date = new Date(timestamp);\n\nlet targetDate = date.toISOString().split('T')[0];\n\nlet filteredData = data.filter(item => {\n    if (!isNaN(new Date(item.date_log))) {\n        let itemDate = new Date(item.date_log).toISOString().split('T')[0];\n        return itemDate === targetDate;\n    } else {\n        return false;\n    }\n});\n\nif (filteredData.length > 0) {\n    msg.payload = filteredData;\n} else {\n    msg.payload = { status: \"No matching data found\", data: data };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 60,
        "wires": [
            [
                "5df8d8e55bcfaa12"
            ]
        ]
    },
    {
        "id": "7878dc4f22923344",
        "type": "function",
        "z": "0ab432dc59b6d0a3",
        "name": "joinDataToHavePremiseNameInsteadOfId",
        "func": "let logs = msg.payload;\nlet premises = global.get('premiseData');\n\n// Ajouter email et name aux objets de reservation\nlogs.forEach(log => {\n    // Trouver la premise correspondant à id_premise\n    let premise = premises.find(premise => premise._id.toString() === log.id_premise.toString());\n    if (premise) {\n        log.premise_name = premise.name;\n    } else {\n        log.premise_name = null; // ou une valeur par défaut\n    }\n});\n\nmsg.payload = logs;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "2cf404800ccde71e"
            ]
        ]
    },
    {
        "id": "a12d5659ca6e4f67",
        "type": "ui_button",
        "z": "0ab432dc59b6d0a3",
        "name": "resetLogsButton",
        "group": "f87d496c91fac1c3",
        "order": 3,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Réinitialiser",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 720,
        "y": 320,
        "wires": [
            [
                "05bbbced881bf006"
            ]
        ]
    },
    {
        "id": "6fc5c06cf6d6b14f",
        "type": "ui_button",
        "z": "0ab432dc59b6d0a3",
        "name": "refreshLogsButton",
        "group": "f87d496c91fac1c3",
        "order": 9,
        "width": 20,
        "height": 1,
        "passthru": false,
        "label": "Rafraîchir les logs",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 90,
        "y": 240,
        "wires": [
            [
                "d8f0f90a42663b1f"
            ]
        ]
    },
    {
        "id": "1fed120fbb0a7dc9",
        "type": "inject",
        "z": "0ab432dc59b6d0a3",
        "name": "trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 120,
        "wires": [
            [
                "d8f0f90a42663b1f"
            ]
        ]
    },
    {
        "id": "05bbbced881bf006",
        "type": "change",
        "z": "0ab432dc59b6d0a3",
        "name": "definesDataTo100LastLogs",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "mongodbData100",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 320,
        "wires": [
            [
                "2cf404800ccde71e"
            ]
        ]
    },
    {
        "id": "d8f0f90a42663b1f",
        "type": "switch",
        "z": "0ab432dc59b6d0a3",
        "name": "",
        "property": "currentRole",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "admin",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "admin",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 240,
        "wires": [
            [
                "62b35b4144bc0c52",
                "852e49285f82d78d"
            ],
            [
                "aa815aa22747d280"
            ]
        ]
    },
    {
        "id": "b2a705ef4f5c603d",
        "type": "ui_text",
        "z": "0ab432dc59b6d0a3",
        "group": "f87d496c91fac1c3",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 490,
        "y": 420,
        "wires": []
    },
    {
        "id": "aa815aa22747d280",
        "type": "function",
        "z": "0ab432dc59b6d0a3",
        "name": "function 3",
        "func": "msg.payload = \"Vous devez être admin pour voir les logs\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 420,
        "wires": [
            [
                "b2a705ef4f5c603d"
            ]
        ]
    },
    {
        "id": "852e49285f82d78d",
        "type": "function",
        "z": "0ab432dc59b6d0a3",
        "name": "function 4",
        "func": "msg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 280,
        "wires": [
            [
                "b2a705ef4f5c603d"
            ]
        ]
    },
    {
        "id": "961826f4c996c896",
        "type": "ui_text",
        "z": "19da2f4cf4bf4170",
        "group": "b433e86cb98af344",
        "order": 1,
        "width": 14,
        "height": 1,
        "name": "displayTitle",
        "label": "Utilisateurs",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "32",
        "color": "#ffffff",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "2511177c847c7df8",
        "type": "ui_button",
        "z": "19da2f4cf4bf4170",
        "name": "createUserButton",
        "group": "b433e86cb98af344",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Créer",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 470,
        "y": 80,
        "wires": [
            [
                "4c39ee51ddf3b1a6"
            ]
        ]
    },
    {
        "id": "ec687b3180687b6d",
        "type": "ui_ui_control",
        "z": "19da2f4cf4bf4170",
        "name": "switch",
        "events": "change",
        "x": 910,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4c39ee51ddf3b1a6",
        "type": "change",
        "z": "19da2f4cf4bf4170",
        "name": "switchToCreateUserTab",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"tab\":\"CreateUser\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 80,
        "wires": [
            [
                "ec687b3180687b6d"
            ]
        ]
    },
    {
        "id": "d2187ab358b627bf",
        "type": "mongodb4",
        "z": "19da2f4cf4bf4170",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "client",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "fetchClientsInDb",
        "x": 640,
        "y": 260,
        "wires": [
            [
                "a921be82d0c2c420"
            ]
        ]
    },
    {
        "id": "36cc1cb37ca35536",
        "type": "inject",
        "z": "19da2f4cf4bf4170",
        "name": "trigger",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 260,
        "wires": [
            [
                "5b027e2170cc7ef8",
                "9fc6d51011e61320"
            ]
        ]
    },
    {
        "id": "5b027e2170cc7ef8",
        "type": "function",
        "z": "19da2f4cf4bf4170",
        "name": "prepareQueryToFetchClientsInDb",
        "func": "const query = { };\n\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 260,
        "wires": [
            [
                "d2187ab358b627bf"
            ]
        ]
    },
    {
        "id": "a921be82d0c2c420",
        "type": "function",
        "z": "19da2f4cf4bf4170",
        "name": "addActionButtonToEachClientToDelete",
        "func": "let users = msg.payload;\n\nglobal.set('clientData', users);\n\nusers = users.map(user => {\n    user.action = `<a href=\"/delete_user?id=${user._id}\">Supprimer</a>`;\n    return user;\n});\n\n\nmsg.payload = users;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 260,
        "wires": [
            [
                "478210a64f28ad5c"
            ]
        ]
    },
    {
        "id": "478210a64f28ad5c",
        "type": "ui_template",
        "z": "19da2f4cf4bf4170",
        "group": "b433e86cb98af344",
        "name": "displayClientsInTable",
        "order": 5,
        "width": 20,
        "height": 6,
        "format": "<table>\n    <thead>\n        <tr>\n            <th>Id</th>\n            <th>Email</th>\n            <th>Prénom</th>\n            <th>Nom</th>\n            <th>Téléphone</th>\n            <th>Role</th>\n            <th>Action</th>\n        </tr>\n    </thead>\n    <tbody id=\"table-body\">\n        <tr ng-repeat=\"row in msg.payload\">\n            <td>{{ row._id }}</td>\n            <td>{{ row.email }}</td>\n            <td>{{ row.firstname }}</td>\n            <td>{{ row.name }}</td>\n            <td>{{ row.telephone }}</td>\n            <td>{{ row.role }}</td>\n            <td ng-bind-html=\"row.action\"></td>        </tr>\n    </tbody>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "users_table_smartoffice",
        "x": 1220,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "5ab0868f656e94ae",
        "type": "mongodb4",
        "z": "19da2f4cf4bf4170",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "premise",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "fetchPremisesInDb",
        "x": 650,
        "y": 360,
        "wires": [
            [
                "192ca4dd97f406f7"
            ]
        ]
    },
    {
        "id": "9fc6d51011e61320",
        "type": "function",
        "z": "19da2f4cf4bf4170",
        "name": "prepareQueryToFetchPremiseInDb",
        "func": "const query = { };\n\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 360,
        "wires": [
            [
                "5ab0868f656e94ae"
            ]
        ]
    },
    {
        "id": "192ca4dd97f406f7",
        "type": "function",
        "z": "19da2f4cf4bf4170",
        "name": "setPremiseDataAsGlobalVariable",
        "func": "global.set('premiseData', msg.payload);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "f540ca4c2be60134",
        "type": "ui_form",
        "z": "a71c83548b86d5cf",
        "name": "createUserForm",
        "label": "",
        "group": "600bf87db0283dac",
        "order": 2,
        "width": 20,
        "height": 1,
        "options": [
            {
                "label": "Email",
                "value": "email",
                "type": "email",
                "required": true,
                "rows": null
            },
            {
                "label": "Prénom",
                "value": "firstname",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Nom",
                "value": "name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Mot de passe",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Téléphone",
                "value": "telephone",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Role admin",
                "value": "role",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "RFID",
                "value": "rfid",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "email": "",
            "firstname": "",
            "name": "",
            "password": "",
            "telephone": "",
            "role": false,
            "rfid": ""
        },
        "payload": "",
        "submit": "Créer",
        "cancel": "Annuler",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "027dbc9a9f236cce"
            ]
        ]
    },
    {
        "id": "2cedfe5448181f34",
        "type": "ui_text",
        "z": "a71c83548b86d5cf",
        "group": "600bf87db0283dac",
        "order": 1,
        "width": 20,
        "height": 1,
        "name": "displayTitle",
        "label": "Utilisateur > ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "32",
        "color": "#ffffff",
        "x": 390,
        "y": 60,
        "wires": []
    },
    {
        "id": "be608c14c998f1dc",
        "type": "inject",
        "z": "a71c83548b86d5cf",
        "name": "triggerTitle",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Créer",
        "payloadType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "2cedfe5448181f34"
            ]
        ]
    },
    {
        "id": "aadfbbe2d1c83e76",
        "type": "mongodb4",
        "z": "a71c83548b86d5cf",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "client",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "createClient",
        "x": 730,
        "y": 180,
        "wires": [
            [
                "ab2f3df19898e40e"
            ]
        ]
    },
    {
        "id": "027dbc9a9f236cce",
        "type": "function",
        "z": "a71c83548b86d5cf",
        "name": "formatFormToInsertInDb",
        "func": "let user = msg.payload;\n\nif (user.role === false) {\n    user.role = \"user\";\n} else if (user.role === true) {\n    user.role = \"admin\";\n}\n\nmsg.payload = user;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 220,
        "wires": [
            [
                "c19dfb984873cbaa"
            ]
        ]
    },
    {
        "id": "ab2f3df19898e40e",
        "type": "function",
        "z": "a71c83548b86d5cf",
        "name": "redirectToUsersPage",
        "func": "msg.payload = {\"tab\":\"Utilisateurs\"};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 180,
        "wires": [
            [
                "ac2484a266f7be90"
            ]
        ]
    },
    {
        "id": "ac2484a266f7be90",
        "type": "ui_ui_control",
        "z": "a71c83548b86d5cf",
        "name": "switchTab",
        "events": "all",
        "x": 1160,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3e4baf5e013c3a75",
        "type": "function",
        "z": "a71c83548b86d5cf",
        "name": "getPassword",
        "func": "msg.payload = msg.payload.password;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 280,
        "wires": [
            [
                "44acf02726cbef6c"
            ]
        ]
    },
    {
        "id": "44acf02726cbef6c",
        "type": "exec",
        "z": "a71c83548b86d5cf",
        "command": "python3 flask/hash_password.py ${payload}",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "api_hash_password_bcrypt",
        "x": 900,
        "y": 280,
        "wires": [
            [
                "8c51c8fd6444db58"
            ],
            [],
            []
        ]
    },
    {
        "id": "8c51c8fd6444db58",
        "type": "function",
        "z": "a71c83548b86d5cf",
        "name": "getHashAndSalt",
        "func": "let parts = msg.payload.split(\" \");\n\nmsg.hashed_password = parts[0];\nmsg.salt = parts[1];\n\nlet user = flow.get('tempUser');\nuser.password = msg.hashed_password;\nuser.salt = msg.salt;\n\nmsg.payload = user;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 280,
        "wires": [
            [
                "aadfbbe2d1c83e76"
            ]
        ]
    },
    {
        "id": "c19dfb984873cbaa",
        "type": "change",
        "z": "a71c83548b86d5cf",
        "name": "savePayloadInTempUser",
        "rules": [
            {
                "t": "set",
                "p": "tempUser",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 280,
        "wires": [
            [
                "3e4baf5e013c3a75"
            ]
        ]
    },
    {
        "id": "70df47423de0b885",
        "type": "ui_form",
        "z": "01557fa3c5d57cbe",
        "d": true,
        "name": "edit_user_form",
        "label": "",
        "group": "1e09fa150998fee1",
        "order": 6,
        "width": 34,
        "height": 7,
        "options": [
            {
                "label": "Email",
                "value": "email",
                "type": "email",
                "required": true,
                "rows": null
            },
            {
                "label": "Prénom",
                "value": "firstname",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Nom",
                "value": "name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Mot de passe",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Téléphone",
                "value": "telephone",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Role admin",
                "value": "role",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "RFID",
                "value": "rfid",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "email": "",
            "firstname": "",
            "name": "",
            "password": "",
            "telephone": "",
            "role": false,
            "rfid": ""
        },
        "payload": "",
        "submit": "Modifier",
        "cancel": "Annuler",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 660,
        "y": 140,
        "wires": [
            [
                "88cbe4022143dfab"
            ]
        ]
    },
    {
        "id": "3c43bb6eb20edbbc",
        "type": "ui_text",
        "z": "01557fa3c5d57cbe",
        "d": true,
        "group": "1e09fa150998fee1",
        "order": 1,
        "width": 24,
        "height": 1,
        "name": "title",
        "label": "Utilisateur > ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "32",
        "color": "#ffffff",
        "x": 350,
        "y": 40,
        "wires": []
    },
    {
        "id": "a83704f6176303df",
        "type": "inject",
        "z": "01557fa3c5d57cbe",
        "d": true,
        "name": "edit",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Modifier",
        "payloadType": "str",
        "x": 130,
        "y": 40,
        "wires": [
            [
                "3c43bb6eb20edbbc",
                "73a0b0e86d1ecfcd"
            ]
        ]
    },
    {
        "id": "73a0b0e86d1ecfcd",
        "type": "function",
        "z": "01557fa3c5d57cbe",
        "d": true,
        "name": "function 1",
        "func": "var searchId = global.get(\"user_id\");\n\nif (!searchId) {\n    return { payload: { error: \"Global variable 'searchId' is not set\" } };\n}\n\nvar query = { email: searchId };\n\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 140,
        "wires": [
            [
                "63d2c5beb1139d43"
            ]
        ]
    },
    {
        "id": "63d2c5beb1139d43",
        "type": "mongodb4",
        "z": "01557fa3c5d57cbe",
        "d": true,
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "client",
        "operation": "find",
        "output": "forEach",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findWithId",
        "x": 460,
        "y": 140,
        "wires": [
            [
                "70df47423de0b885"
            ]
        ]
    },
    {
        "id": "b61235c8ef4235fa",
        "type": "mongodb4",
        "z": "01557fa3c5d57cbe",
        "d": true,
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "client",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "edit",
        "x": 1010,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "88cbe4022143dfab",
        "type": "function",
        "z": "01557fa3c5d57cbe",
        "d": true,
        "name": "function 2",
        "func": "let formData = msg.payload;\n\nmsg.payload = {\n    \"query\": { \"email\": formData.email },\n    \"update\": { \n        \"$set\": {\n            \"firstname\": formData.firstname,\n            \"name\": formData.name,\n            \"password\": formData.password,\n            \"telephone\": formData.telephone,\n            \"role\": formData.role,\n            \"rfid\": formData.rfid\n        }\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 140,
        "wires": [
            [
                "b61235c8ef4235fa"
            ]
        ]
    },
    {
        "id": "50702c252190167a",
        "type": "http in",
        "z": "01557fa3c5d57cbe",
        "name": "removeUserHttpRequest",
        "url": "/delete_user",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "5c78dcafba76ebfd"
            ]
        ]
    },
    {
        "id": "5c78dcafba76ebfd",
        "type": "function",
        "z": "01557fa3c5d57cbe",
        "name": "prepareQueryToDeleteInDb",
        "func": "let users = global.get('clientData');\n\nlet userId = msg.req.query.id;\n\nlet user = users.find(user => user._id.toString() === userId);\ndelete user.action;\n\nif (user) {\n    msg.payload = user;\n} else {\n    msg.payload = { message: \"Utilisateur non trouvé\" };\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 280,
        "wires": [
            [
                "342a07ec23ace6e8"
            ]
        ]
    },
    {
        "id": "22835d4307fbe224",
        "type": "function",
        "z": "01557fa3c5d57cbe",
        "name": "prepareToRedirectToUsersPage",
        "func": "msg.statusCode = 302;\nmsg.headers = { location: \"/#!/4\" };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 280,
        "wires": [
            [
                "06200f288e5e02a9"
            ]
        ]
    },
    {
        "id": "06200f288e5e02a9",
        "type": "http response",
        "z": "01557fa3c5d57cbe",
        "name": "redirectUsingHttpRequest",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 280,
        "wires": []
    },
    {
        "id": "342a07ec23ace6e8",
        "type": "mongodb4",
        "z": "01557fa3c5d57cbe",
        "clientNode": "08886a7cd4dd855e",
        "mode": "collection",
        "collection": "client",
        "operation": "deleteOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "removeUser",
        "x": 650,
        "y": 280,
        "wires": [
            [
                "22835d4307fbe224"
            ]
        ]
    },
    {
        "id": "298adb3fd1c582a4",
        "type": "ui_template",
        "z": "1317a1110c9c2dbe",
        "group": "",
        "name": "Custom CSS",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<style>\n    body {\n\tbackground: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\n\tbackground-size: 400% 400%;\n\tanimation: gradient 15s ease infinite;\n\theight: 100vh;\n}\n\n@keyframes gradient {\n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n}\n    \n    /* Top bar */\n    body.nr-dashboard-theme md-toolbar,\n    body.nr-dashboard-theme md-content md-card {\n    background-color: transparent !important;\n    color: #FFFFFF !important;\n    }\n    \n    /* Left menu */\n    /* Sidebar */\n    body.nr-dashboard-theme md-sidenav {\n    color: white !important;\n    background-color: rgba(0, 0, 0, 0) !important;\n    }\n    \n    /* Hover selection */\n    a.md-no-style, button.md-no-style {\n    border-radius: 10px !important;\n    }\n    \n    /* Selected */\n    .nr-menu-item-active div button {\n    border-right: 4px solid rgb(41, 98, 255) !important;\n    }\n    \n    /* List */\n    body.nr-dashboard-theme md-sidenav div.md-list-item-inner {\n    color: white !important;\n    background-color: rgba(40, 85, 165, 1) !important;\n    border-radius: 10px !important;\n    }\n    \n    /* Groups */\n    ui-card-panel {\n    background-color: rgba(255, 255, 255, 0.1) !important;\n    border-radius: 10px !important;\n    }\n    \n    .nr-dashboard-theme ui-card-panel {\n    border: none !important;\n    }\n    \n    /* Name groups */\n    .nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n    color: rgba(255, 255, 255, 0.5) !important;\n    }\n    \n    /* Buttons */\n    .nr-dashboard-theme .nr-dashboard-button .md-button {\n    background-color: rgba(255, 255, 255, 0.1) !important;\n    }\n    \n    .md-button {\n    border-radius: 10px !important;\n    }\n    \n    /* Dropdown menu */\n    .nr-dashboard-theme md-select-menu {\n    background-color: rgba(40, 85, 165, 1) !important;\n    }\n    \n    .nr-dashboard-theme md-select-menu,\n    .nr-dashboard-theme md-select-menu md-option {\n    background-color: transparent !important;\n    }\n    \n    .nr-dashboard-theme .md-select-menu-container {\n    border-radius: 10px !important;\n    border: none !important;\n    }\n    \n    .nr-dashboard-theme md-select-menu md-option[selected] {\n    color: white !important;\n    background-color: #1a3566 !important;\n    }\n    \n    /* Template */\n    md-card > img,\n    md-card > md-card-header img,\n    md-card md-card-title-media img {\n    border-radius: 10px !important;\n    }\n    \n    /* Color picker text BG */\n    .nr-dashboard-theme .color-picker-input-wrapper > input {\n    color: white !important;\n    background-color: transparent !important;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 150,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a120abfcab3a8c2f",
        "type": "inject",
        "z": "1317a1110c9c2dbe",
        "name": "atBegginingTrigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "4677ddfdc16a5fcc"
            ]
        ]
    },
    {
        "id": "4677ddfdc16a5fcc",
        "type": "change",
        "z": "1317a1110c9c2dbe",
        "name": "setRpiAsInactive",
        "rules": [
            {
                "t": "set",
                "p": "rpiActive",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "5a8283ed015441de",
        "type": "ui_template",
        "z": "1317a1110c9c2dbe",
        "group": "",
        "name": "Logs_table CSS",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .logs_table_smartoffice table {\n    width: 100% !important;\n    border-collapse: collapse !important;\n    font-family: Arial, sans-serif !important;\n    margin: 20px 0 !important;\n    font-size: 16px !important;\n    text-align: left !important;\n    color: #ffffff !important; /* Texte blanc */\n    }\n    \n    .logs_table_smartoffice thead th {\n    padding: 10px !important;\n    border: 1px solid #dddddd !important;\n    color: #ffffff !important; /* Texte blanc */\n    background-color: rgba(255, 255, 255, 0.5) !important; /* Arrière-plan blanc avec opacité */\n    }\n    \n    .logs_table_smartoffice tbody tr {\n    border-bottom: 1px solid #dddddd !important;\n    background-color: transparent !important; /* Supprime les arrière-plans imposés */\n    }\n    \n    .logs_table_smartoffice tbody tr:nth-child(even) {\n    background-color: transparent !important; /* Empêche le style alterné par défaut */\n    }\n    \n    .logs_table_smartoffice tbody td {\n    padding: 8px 10px !important;\n    border: 1px solid #dddddd !important;\n    color: #ffffff !important; /* Texte blanc */\n    background-color: transparent !important; /* Supprime tout arrière-plan */\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 160,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "57d92515054025a5",
        "type": "ui_template",
        "z": "1317a1110c9c2dbe",
        "group": "",
        "name": "Users table CSS",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .users_table_smartoffice table {\n    width: 100% !important;\n    border-collapse: collapse !important;\n    font-family: Arial, sans-serif !important;\n    margin: 20px 0 !important;\n    font-size: 16px !important;\n    text-align: left !important;\n    color: #ffffff !important; /* Texte blanc */\n    }\n\n    .users_table_smartoffice thead th {\n        padding: 10px !important;\n        border: 1px solid #dddddd !important;\n        color: #ffffff !important; /* Texte blanc */\n        background-color: rgba(255, 255, 255, 0.5) !important; /* Arrière-plan blanc avec opacité */\n    }\n\n    .users_table_smartoffice tbody tr {\n        border-bottom: 1px solid #dddddd !important;\n        background-color: transparent !important; /* Supprime les arrière-plans imposés */\n    }\n\n    .users_table_smartoffice tbody tr:nth-child(even) {\n        background-color: transparent !important; /* Empêche le style alterné par défaut */\n    }\n\n    .users_table_smartoffice tbody td {\n        padding: 8px 10px !important;\n        border: 1px solid #dddddd !important;\n        color: #ffffff !important; /* Texte blanc */\n        background-color: transparent !important; /* Supprime tout arrière-plan */\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 160,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "67b99b59e82c4fe5",
        "type": "ui_template",
        "z": "1317a1110c9c2dbe",
        "group": "",
        "name": "Reservation table CSS",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .reservation_table_smartoffice table {\n    width: 100% !important;\n    border-collapse: collapse !important;\n    font-family: Arial, sans-serif !important;\n    margin: 20px 0 !important;\n    font-size: 16px !important;\n    text-align: left !important;\n    color: #ffffff !important; /* Texte blanc */\n    }\n    \n    .reservation_table_smartoffice thead th {\n    padding: 10px !important;\n    border: 1px solid #dddddd !important;\n    color: #ffffff !important; /* Texte blanc */\n    background-color: rgba(255, 255, 255, 0.5) !important; /* Arrière-plan blanc avec opacité */\n    }\n    \n    .reservation_table_smartoffice tbody tr {\n    border-bottom: 1px solid #dddddd !important;\n    background-color: transparent !important; /* Supprime les arrière-plans imposés */\n    }\n    \n    .reservation_table_smartoffice tbody tr:nth-child(even) {\n    background-color: transparent !important; /* Empêche le style alterné par défaut */\n    }\n    \n    .reservation_table_smartoffice tbody td {\n    padding: 8px 10px !important;\n    border: 1px solid #dddddd !important;\n    color: #ffffff !important; /* Texte blanc */\n    background-color: transparent !important; /* Supprime tout arrière-plan */\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 180,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "14bf1c546e428536",
        "type": "debug",
        "z": "1317a1110c9c2dbe",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 240,
        "wires": []
    },
    {
        "id": "70f5df734cbe9edb",
        "type": "exec",
        "z": "1317a1110c9c2dbe",
        "command": "python3 flask/decode_token.py ${payload}",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "api_decode_token",
        "x": 670,
        "y": 420,
        "wires": [
            [
                "3ea9cff0e95b3943"
            ],
            [],
            []
        ]
    },
    {
        "id": "af2fb76caa543a3b",
        "type": "function",
        "z": "1317a1110c9c2dbe",
        "name": "prepareRequest",
        "func": "msg.payload = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 420,
        "wires": [
            [
                "70f5df734cbe9edb"
            ]
        ]
    },
    {
        "id": "bbf56735fca25924",
        "type": "inject",
        "z": "1317a1110c9c2dbe",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "cameron.noupoue@student.hepl.be",
        "payloadType": "str",
        "x": 250,
        "y": 400,
        "wires": [
            [
                "af2fb76caa543a3b"
            ]
        ]
    },
    {
        "id": "243e6b40a4c1304d",
        "type": "inject",
        "z": "1317a1110c9c2dbe",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "nasser.kotiyev@student.hepl.be",
        "payloadType": "str",
        "x": 250,
        "y": 440,
        "wires": [
            [
                "af2fb76caa543a3b"
            ]
        ]
    },
    {
        "id": "3ea9cff0e95b3943",
        "type": "function",
        "z": "1317a1110c9c2dbe",
        "name": "setGlobalRole",
        "func": "// Remplacer les guillemets simples par des guillemets doubles\nnode.warn(msg.payload);\nconst validJsonString = msg.payload.replace(/'/g, '\"');\n\n// Convertir la chaîne en objet JSON\ntry {\n    const payload = JSON.parse(validJsonString);\n\n    // Retourne uniquement la valeur de 'role'\n    msg.payload = payload.role;\n    global.set('currentRole', payload.role);\n\n} catch (error) {\n    msg.payload = \"Invalid JSON format\";\n    node.status({ fill: \"red\", shape: \"dot\", text: \"Invalid JSON\" });\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 420,
        "wires": [
            [
                "14bf1c546e428536"
            ]
        ]
    }
]